{"version":3,"sources":["components/insertable.js","node_modules/backbone-events-standalone/backbone-events-standalone.js","node_modules/backbone-events-standalone/index.js","node_modules/biojs-events/index.js","lib/inchlib-1.2.0.js"],"names":["idSet","Set","initTable","table","innerHTML","addMir","id","idMap","document","getElementById","length","rows","connection_kind","forEach","element","has","add","newRow","insertRow","insertCell","innerText","element_getDetailes","addEventListener","event","td","tr","target","parentNode","removeChild","delete","targetConnection","Left_element_array","children","split","element_deatils","connection_list","show_connections","$","modal","connections_from_localStorage_name","connections_from_localStorage","localStorage","getItem","dict","JSON","parse","undefined","textContent","require","InCHlib","_this","isMergeableObject","e","Object","prototype","toString","call","emptyTarget","Array","isArray","cloneIfNecessary","r","clone","deepmerge","defaultArrayMerge","t","a","slice","c","indexOf","push","mergeObject","keys","arrayMerge","all","Error","reduce","settings","user_settings","target_element","css","update_settings","width","max_width","target_width","heatmap","relative_width","header_height","footer_height","dendrogram_heatmap_distance","events","object_ids","evt","console","log","row_click","row_mouseover","row_mouseout","node_id","dendrogram_node_click","column_indexes","column_dendrogram_node_click","empty_space_click","obj","colors","objects_ref","Konva","Label","opacity","listening","preventDefault","Tag","fill","label_color","pointerWidth","pointerHeight","lineJoin","Text","fontFamily","font","fontSize","padding","fontStyle","align","lineHeight","Line","stroke","strokeWidth","lineCap","Rect","height","value","dash","Path","x","y","fillLinearGradientStartPoint","fillLinearGradientEndPoint","Image","paths_ref","_update_user_settings","read_data","json","data","metadata","draw","column_dendrogram","heatmap_header","rotation","stringify","column_metadata","alternative_data","nodes","feature_names","_add_prefix","node_ids","leaf_ids","filter","count","send_json","_add_prefix_to_data","i","len","join","prefixed_data","parent","left_child","right_child","_get_root_id","root_id","_get_dimensions","dimensions","images","features","_get_min_max_middle","concat","sort","b","params","min","_hack_round","Math","apply","max","middle","_get_data_min_max_middle","axis","section","data2descs","j","columns","data_length","data_min_max_middle","value_type","extend","_is_number","map","parseFloat","hash_object","_get_hash_object","_hack_size","array","_get_max_length","items","lengths","_get_max_value_length","node_data","max_length","values","current_leaf_ids","v","len_2","_preprocess_heatmap_data","key","node","heatmap_array","_reorder_heatmap","column_index","leaves_y_coordinates","ordered_by_index","reverse","top_heatmap_distance","pixels_for_leaf","time","zoomed_clusters","last_highlighted_cluster","current_object_ids","current_column_ids","highlighted_rows_y","on_features","column_metadata_rows","column_metadata_height","row_height","last_column","_set_heatmap_settings","_adjust_leaf_size","row_ids","_get_row_id_size","right_margin","_adjust_horizontal_sizes","stage","Stage","container","setWidth","setHeight","_draw_stage_layer","dendrogram","timer","_draw_dendrogram_layers","_draw_row_dendrogram","timeEnd","column_root_id","nodes2columns","columns_start_index","_draw_column_dendrogram","path2image","path2image_obj","image_counter","_draw_heatmap","_draw_heatmap_header","_draw_navigation","highlight_rows","highlighted_rows","style","display","animate","scrollTop","cluster_layer","Layer","dendrogram_hover_layer","on","unhighlight_cluster","unhighlight_column_cluster","empty_space_onclick","_get_node_levels","level","parent_id","dendrogram_layer","distance_step","distance","objects2leaves","current_left_count","current_right_count","unified_distance","unified_distance_step","node_options","to_draw","_draw_row_dendrogram_node","middle_item_count","min_item_count","max_item_count","_draw_distance_scale","_bind_dendrogram_hover_events","_dendrogram_layers_click","_dendrogram_layers_mousedown","_dendrogram_layers_mouseup","color","node_neighbourhood","_get_node_neighbourhood","y1","_get_y1","y2","_get_y2","left_distance","right_distance","x1","x2","_draw_horizontal_path","left_node","right_count","right_node","left_count","objects","stage_layer","stage_rect","moveToBottom","column_dendrogram_layer","column_x_coordinates","current_column_count","vertical_distance","vertical_distance_step","last_highlighted_column_cluster","_draw_column_dendrogram_node","_get_nodes2columns","_column_dendrogram_layers_click","_column_dendrogram_layers_mousedown","coordinates","coordinates2nodes","layer","_dendrogram_layers_mouseover","_dendrogram_layers_mouseout","_delete_layers","to_destroy","to_remove_children","destroy","removeChildren","_delete_all_layers","destroyChildren","leaves","max_height","fixed_size","_get_visible_count","heatmap_width","pixels_for_dimension","heatmap_distance","column_width","_set_color_settings","data_descs","independent_columns","min_max_middle","metadata_descs","header","columns_order","count_column","_set_on_features","metadata_header","current_label","trim","column_metadata_header","heatmap_row","heatmap_layer","heatmap_overlay","current_draw_values","max_value_length","value_font_size","_get_font_size","_draw_heatmap_row","_bind_row_events","column_metadata_descs","_draw_column_metadata_row","_draw_row_ids","highlighted_rows_layer","moveToTop","row_overlay","heatmap_line","column_overlay","last_header","heatmap_onmouseout","line","text","text_value","col_index","row","Group","includes","filepath","path","dir","ext","escape","image_obj","src","onload","image","points","column","_get_color_for_value","scale","heatmap_value","colors_predefined","value2color","default","getWidth","position","row_index","str2num","fontWeight","_row_mouseenter","_row_mouseleave","_draw_col_label","find","row_id","attrs","class","item_ids","row_onclick","cell","_get_cell_data","cell_click","row_id_size","object_y","leaf_id","append","test_string","test","header_layer","column_header","current_headers","header_settings","index","max_text_length","label","font_size","header_shift","position_index","getChildren","setFill","setAttrs","_translate_column_to_feature_index","setOpacity","navigation_toggle","distance_scale","circle","Circle","radius","number","marker_distance","marker_number_distance","marker_distance_step","round","distance_number","marker_counter","navigation_layer","_draw_color_scale","_draw_help","filter_button","filter_icon","icon","filter_overlay","_draw_icon_overlay","_filter_icon_click","_icon_mouseover","_icon_mouseout","refresh_icon","refresh_overlay","_refresh_icon_click","on_refresh","unzoom_icon","unzoom_overlay","_unzoom_icon_click","column_unzoom_icon","column_unzoom_overlay","_column_unzoom_icon_click","export_button","export_icon","export_overlay","_export_icon_click","hint_button","help_icon","help_overlay","_help_mouseover","_help_mouseout","color_scale","color_steps","rect_gradient","_color_scale_mouseover","_color_scale_mouseout","_color_scale_click","_update_color_scale","fillLinearGradientColorStops","icon_overlay","_highlight_path","path_id","get","_highlight_column_path","unhighlight_rows","original_colors","original_metadata_colors","highlight_colors","done_rows","unique_row_ids","setAttr","fire","_highlight_cluster","previous_cluster","_draw_cluster_layer","dendrogram_node_highlight","_unprefix","_highlight_column_cluster","_draw_column_cluster_layer","column_dendrogram_node_highlight","column_cluster_group","column_dendrogram_node_unhighlight","highlight_cluster","_prefix","highlight_column_cluster","row_cluster_group","dendrogram_node_unhighlight","_neutralize_path","setStroke","visible","rows_desc","zoom_icon","zoom_overlay","upper_y","lower_y","cluster_overlay_1","cluster_overlay","cluster_border_1","cluster_border","cluster_overlay_2","cluster_border_2","_zoom_cluster","cols_desc","_zoom_column_cluster","_draw_column_cluster","row_node","on_columns_zoom","_unzoom_column_cluster","unzoomed","pop","zoomed_count","_get_column_ids","on_columns_unzoom","_draw_cluster","on_zoom","_unzoom_cluster","on_unzoom","left_child_left_child","left_child_right_child","right_child_left_child","right_child_right_child","_get_x1","_get_x2","_draw_vertical_path","path_group","path_rect","node_rect","path_color","filter_features_element","symbol","fadeIn","overlay","_draw_target_overlay","attr","filter_list","parseInt","click","num","symbol_element","mousedown","hover","fadeOut","highlighted_cluster","_visible_features_equal_column_dendrogram_count","redraw","html2canvas","backgroundColor","then","canvas","createElement","href","toDataURL","replace","download","option","color_options","value_options","settings_form","options","color_1","color_2","color_3","i2","len2","key2","color_buttons","settings_fieldset","redraw_heatmap","scale_divs","icon_tooltip","icon_id","help_element","c1","c2","g","text_length","max_possible_size","max_font_size","isFinite","header_type2value","tooltip","pointerDirection"],"mappings":"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","file":"inchlib-1.2.0.99bfc1ac.js","sourceRoot":"..","sourcesContent":["\r\nvar idSet = new Set()\r\nexport function initTable(table){\r\n    idSet= new Set();\r\n    table.innerHTML=\"\";\r\n}\r\n\r\nexport function addMir(id, idMap){\r\n    if(idMap==='inchlib1' ||idMap==='inchlib' ){// add mir only if the mir map was clicked\r\n        var table = document.getElementById(\"table-connect-1to2\")\r\n        var length = document.getElementById(\"table-connect-1to2\").rows.length;\r\n        var connection_kind= \"connect_1to2\";\r\n    }\r\n    else{\r\n        var table = document.getElementById(\"table-connect-2to1\")\r\n        var length = document.getElementById(\"table-connect-2to1\").rows.length;\r\n        var connection_kind= \"connect_2to1\";\r\n\r\n    }\r\n        id.forEach(element => {\r\n            if(!idSet.has(element)){\r\n            idSet.add(element)\r\n            var newRow = table.insertRow(length)\r\n            newRow.insertCell(0).innerText=element\r\n            var element_getDetailes= element+\"-getDetailes-\"+connection_kind;\r\n            newRow.insertCell(1).innerHTML=`<button id=${element_getDetailes}  type='button' >Click here</button>`;\r\n            newRow.insertCell(2).innerHTML=`<i id=${element} style=\"color:red;\"class=\"fas fa-trash-alt\"></i>`;\r\n            document.getElementById(element).addEventListener('click', function deleteId(event){\r\n                var td = event.target.parentNode; \r\n                var tr = td.parentNode; // the row to be removed\r\n                tr.parentNode.removeChild(tr);\r\n                idSet.delete(element);\r\n            });\r\n            document.getElementById(element_getDetailes).addEventListener('click', targetConnection);\r\n            length++;\r\n\r\n            }\r\n        });  \r\n}\r\n\r\n\r\nfunction targetConnection(event){\r\n    var td = event.target.parentNode; \r\n    var Left_element = td.children[0].id;\r\n    var Left_element_array = Left_element.split('-');\r\n    var element_deatils=Left_element_array[0];\r\n    let connection_kind=Left_element_array[2];\r\n\r\n    let connection_list = document.getElementById(\"connection_list\");\r\n\r\n    if(connection_kind===\"connect_1to2\")\r\n        show_connections('first_second_connections', element_deatils,connection_list)\r\n    else\r\n        show_connections('second_first_connections', element_deatils,connection_list)\r\n    \r\n\r\n    $('#connection-dialog').modal('show');\r\n}\r\n\r\nfunction show_connections(connections_from_localStorage_name, element_deatils, connection_list){\r\n    let connections_from_localStorage = localStorage.getItem(connections_from_localStorage_name);\r\n    let dict= JSON.parse(connections_from_localStorage);\r\n    if (dict[element_deatils]== undefined || dict[element_deatils].length == 0)\r\n        connection_list.textContent= 'There are no suitable connections'; \r\n    else\r\n        connection_list.textContent=dict[element_deatils]; \r\n}\r\n\r\n","/**\n * Standalone extraction of Backbone.Events, no external dependency required.\n * Degrades nicely when Backone/underscore are already available in the current\n * global context.\n *\n * Note that docs suggest to use underscore's `_.extend()` method to add Events\n * support to some given object. A `mixin()` method has been added to the Events\n * prototype to avoid using underscore for that sole purpose:\n *\n *     var myEventEmitter = BackboneEvents.mixin({});\n *\n * Or for a function constructor:\n *\n *     function MyConstructor(){}\n *     MyConstructor.prototype.foo = function(){}\n *     BackboneEvents.mixin(MyConstructor.prototype);\n *\n * (c) 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.\n * (c) 2013 Nicolas Perriault\n */\n/* global exports:true, define, module */\n(function() {\n  var root = this,\n      nativeForEach = Array.prototype.forEach,\n      hasOwnProperty = Object.prototype.hasOwnProperty,\n      slice = Array.prototype.slice,\n      idCounter = 0;\n\n  // Returns a partial implementation matching the minimal API subset required\n  // by Backbone.Events\n  function miniscore() {\n    return {\n      keys: Object.keys || function (obj) {\n        if (typeof obj !== \"object\" && typeof obj !== \"function\" || obj === null) {\n          throw new TypeError(\"keys() called on a non-object\");\n        }\n        var key, keys = [];\n        for (key in obj) {\n          if (obj.hasOwnProperty(key)) {\n            keys[keys.length] = key;\n          }\n        }\n        return keys;\n      },\n\n      uniqueId: function(prefix) {\n        var id = ++idCounter + '';\n        return prefix ? prefix + id : id;\n      },\n\n      has: function(obj, key) {\n        return hasOwnProperty.call(obj, key);\n      },\n\n      each: function(obj, iterator, context) {\n        if (obj == null) return;\n        if (nativeForEach && obj.forEach === nativeForEach) {\n          obj.forEach(iterator, context);\n        } else if (obj.length === +obj.length) {\n          for (var i = 0, l = obj.length; i < l; i++) {\n            iterator.call(context, obj[i], i, obj);\n          }\n        } else {\n          for (var key in obj) {\n            if (this.has(obj, key)) {\n              iterator.call(context, obj[key], key, obj);\n            }\n          }\n        }\n      },\n\n      once: function(func) {\n        var ran = false, memo;\n        return function() {\n          if (ran) return memo;\n          ran = true;\n          memo = func.apply(this, arguments);\n          func = null;\n          return memo;\n        };\n      }\n    };\n  }\n\n  var _ = miniscore(), Events;\n\n  // Backbone.Events\n  // ---------------\n\n  // A module that can be mixed in to *any object* in order to provide it with\n  // custom events. You may bind with `on` or remove with `off` callback\n  // functions to an event; `trigger`-ing an event fires all callbacks in\n  // succession.\n  //\n  //     var object = {};\n  //     _.extend(object, Backbone.Events);\n  //     object.on('expand', function(){ alert('expanded'); });\n  //     object.trigger('expand');\n  //\n  Events = {\n\n    // Bind an event to a `callback` function. Passing `\"all\"` will bind\n    // the callback to all events fired.\n    on: function(name, callback, context) {\n      if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;\n      this._events || (this._events = {});\n      var events = this._events[name] || (this._events[name] = []);\n      events.push({callback: callback, context: context, ctx: context || this});\n      return this;\n    },\n\n    // Bind an event to only be triggered a single time. After the first time\n    // the callback is invoked, it will be removed.\n    once: function(name, callback, context) {\n      if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;\n      var self = this;\n      var once = _.once(function() {\n        self.off(name, once);\n        callback.apply(this, arguments);\n      });\n      once._callback = callback;\n      return this.on(name, once, context);\n    },\n\n    // Remove one or many callbacks. If `context` is null, removes all\n    // callbacks with that function. If `callback` is null, removes all\n    // callbacks for the event. If `name` is null, removes all bound\n    // callbacks for all events.\n    off: function(name, callback, context) {\n      var retain, ev, events, names, i, l, j, k;\n      if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;\n      if (!name && !callback && !context) {\n        this._events = {};\n        return this;\n      }\n\n      names = name ? [name] : _.keys(this._events);\n      for (i = 0, l = names.length; i < l; i++) {\n        name = names[i];\n        if (events = this._events[name]) {\n          this._events[name] = retain = [];\n          if (callback || context) {\n            for (j = 0, k = events.length; j < k; j++) {\n              ev = events[j];\n              if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||\n                  (context && context !== ev.context)) {\n                retain.push(ev);\n              }\n            }\n          }\n          if (!retain.length) delete this._events[name];\n        }\n      }\n\n      return this;\n    },\n\n    // Trigger one or many events, firing all bound callbacks. Callbacks are\n    // passed the same arguments as `trigger` is, apart from the event name\n    // (unless you're listening on `\"all\"`, which will cause your callback to\n    // receive the true name of the event as the first argument).\n    trigger: function(name) {\n      if (!this._events) return this;\n      var args = slice.call(arguments, 1);\n      if (!eventsApi(this, 'trigger', name, args)) return this;\n      var events = this._events[name];\n      var allEvents = this._events.all;\n      if (events) triggerEvents(events, args);\n      if (allEvents) triggerEvents(allEvents, arguments);\n      return this;\n    },\n\n    // Tell this object to stop listening to either specific events ... or\n    // to every object it's currently listening to.\n    stopListening: function(obj, name, callback) {\n      var listeners = this._listeners;\n      if (!listeners) return this;\n      var deleteListener = !name && !callback;\n      if (typeof name === 'object') callback = this;\n      if (obj) (listeners = {})[obj._listenerId] = obj;\n      for (var id in listeners) {\n        listeners[id].off(name, callback, this);\n        if (deleteListener) delete this._listeners[id];\n      }\n      return this;\n    }\n\n  };\n\n  // Regular expression used to split event strings.\n  var eventSplitter = /\\s+/;\n\n  // Implement fancy features of the Events API such as multiple event\n  // names `\"change blur\"` and jQuery-style event maps `{change: action}`\n  // in terms of the existing API.\n  var eventsApi = function(obj, action, name, rest) {\n    if (!name) return true;\n\n    // Handle event maps.\n    if (typeof name === 'object') {\n      for (var key in name) {\n        obj[action].apply(obj, [key, name[key]].concat(rest));\n      }\n      return false;\n    }\n\n    // Handle space separated event names.\n    if (eventSplitter.test(name)) {\n      var names = name.split(eventSplitter);\n      for (var i = 0, l = names.length; i < l; i++) {\n        obj[action].apply(obj, [names[i]].concat(rest));\n      }\n      return false;\n    }\n\n    return true;\n  };\n\n  // A difficult-to-believe, but optimized internal dispatch function for\n  // triggering events. Tries to keep the usual cases speedy (most internal\n  // Backbone events have 3 arguments).\n  var triggerEvents = function(events, args) {\n    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];\n    switch (args.length) {\n      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;\n      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;\n      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;\n      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;\n      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args);\n    }\n  };\n\n  var listenMethods = {listenTo: 'on', listenToOnce: 'once'};\n\n  // Inversion-of-control versions of `on` and `once`. Tell *this* object to\n  // listen to an event in another object ... keeping track of what it's\n  // listening to.\n  _.each(listenMethods, function(implementation, method) {\n    Events[method] = function(obj, name, callback) {\n      var listeners = this._listeners || (this._listeners = {});\n      var id = obj._listenerId || (obj._listenerId = _.uniqueId('l'));\n      listeners[id] = obj;\n      if (typeof name === 'object') callback = this;\n      obj[implementation](name, callback, this);\n      return this;\n    };\n  });\n\n  // Aliases for backwards compatibility.\n  Events.bind   = Events.on;\n  Events.unbind = Events.off;\n\n  // Mixin utility\n  Events.mixin = function(proto) {\n    var exports = ['on', 'once', 'off', 'trigger', 'stopListening', 'listenTo',\n                   'listenToOnce', 'bind', 'unbind'];\n    _.each(exports, function(name) {\n      proto[name] = this[name];\n    }, this);\n    return proto;\n  };\n\n  // Export Events as BackboneEvents depending on current context\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = Events;\n    }\n    exports.BackboneEvents = Events;\n  }else if (typeof define === \"function\"  && typeof define.amd == \"object\") {\n    define(function() {\n      return Events;\n    });\n  } else {\n    root.BackboneEvents = Events;\n  }\n})(this);\n","module.exports = require('./backbone-events-standalone');\n","var events = require(\"backbone-events-standalone\");\n\nevents.onAll = function(callback,context){\n  this.on(\"all\", callback,context);\n  return this;\n};\n\n// Mixin utility\nevents.oldMixin = events.mixin;\nevents.mixin = function(proto) {\n  events.oldMixin(proto);\n  // add custom onAll\n  var exports = ['onAll'];\n  for(var i=0; i < exports.length;i++){\n    var name = exports[i];\n    proto[name] = this[name];\n  }\n  return proto;\n};\n\nmodule.exports = events;\n","const {addMir} = require('../components/insertable')\r\n/*DEEP MERGE*/\r\nfunction isMergeableObject(e){return e&&\"object\"==typeof e&&\"[object RegExp]\"!==Object.prototype.toString.call(e)&&\"[object Date]\"!==Object.prototype.toString.call(e)}function emptyTarget(e){return Array.isArray(e)?[]:{}}function cloneIfNecessary(e,r){return r&&!0===r.clone&&isMergeableObject(e)?deepmerge(emptyTarget(e),e,r):e}function defaultArrayMerge(e,r,t){var a=e.slice();return r.forEach(function(r,c){void 0===a[c]?a[c]=cloneIfNecessary(r,t):isMergeableObject(r)?a[c]=deepmerge(e[c],r,t):-1===e.indexOf(r)&&a.push(cloneIfNecessary(r,t))}),a}function mergeObject(e,r,t){var a={};return isMergeableObject(e)&&Object.keys(e).forEach(function(r){a[r]=cloneIfNecessary(e[r],t)}),Object.keys(r).forEach(function(c){isMergeableObject(r[c])&&e[c]?a[c]=deepmerge(e[c],r[c],t):a[c]=cloneIfNecessary(r[c],t)}),a}function deepmerge(e,r,t){var a=Array.isArray(r),c=(t||{arrayMerge:defaultArrayMerge}).arrayMerge||defaultArrayMerge;return a?Array.isArray(e)?c(e,r,t):cloneIfNecessary(r,t):mergeObject(e,r,t)}deepmerge.all=function(e,r){if(!Array.isArray(e)||e.length<2)throw new Error(\"first argument should be an array with at least two elements\");return e.reduce(function(e,t){return deepmerge(e,t,r)})};\r\n\r\n/**\r\n* InCHlib is an interactive JavaScript library which facilitates data\r\n* visualization and exploration by means of a cluster heatmap. InCHlib\r\n* is a versatile tool, and its use is not limited only to chemical or\r\n* biological data. Source code, tutorial, documentation, and example\r\n* data are freely available from InCHlib website <a\r\n* href=\"http://openscreen.cz/software/inchlib\"\r\n* target=blank>http://openscreen.cz/software/inchlib</a>. At the\r\n* website, you can also find a Python script <a\r\n* href=\"http://openscreen.cz/software/inchlib/inchlib_clust\"\r\n* target=blank>inchlib_clust</a> which performs data clustering and\r\n* prepares <a href=\"http://openscreen.cz/software/inchlib/input_format\"\r\n* target=blank>input data for InCHlib</a>.\r\n* \r\n* @author <a href=\"mailto:ctibor.skuta@img.cas.cz\">Ctibor Škuta</a>\r\n* @author <a href=\"mailto:petr.bartunek@img.cas.cz\">Petr Bartůněk</a>\r\n* @author <a href=\"mailto:svozild@vscht.cz\">Daniel Svozil</a>\r\n* @version dev\r\n* @category 1\r\n* @license InCHlib - Interactive Cluster Heatmap Library http://openscreen.cz/software/inchlib Copyright 2014, Ctibor Škuta, Petr Bartůněk, Daniel Svozil Licensed under the MIT license.\r\n* \r\n* Permission is hereby granted, free of charge, to any person\r\n* obtaining a copy of this software and associated documentation\r\n* files (the \"Software\"), to deal in the Software without\r\n* restriction, including without limitation the rights to use,\r\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the\r\n* Software is furnished to do so, subject to the following\r\n* conditions:\r\n* \r\n* The above copyright notice and this permission notice shall be\r\n* included in all copies or substantial portions of the Software.\r\n* \r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\n* OTHER DEALINGS IN THE SOFTWARE.\r\n* \r\n* @requires <a href='http://code.jquery.com/jquery-2.0.3.min.js'>jQuery Core 2.0.3</a>\r\n* @dependency <script language=\"JavaScript\" type=\"text/javascript\" src=\"http://code.jquery.com/jquery-2.0.3.min.js\"></script>\r\n* \r\n* @requires <a href='https://cdn.rawgit.com/konvajs/konva/0.9.5/konva.min.js'>KonvaJS 0.9.5</a>\r\n* @dependency <script language=\"JavaScript\" type=\"text/javascript\" src=\"https://cdn.rawgit.com/konvajs/konva/0.9.5/konva.min.js\"></script>\r\n*\r\n* @param {Object} options An object with the options for the InCHlib component.\r\n*\r\n* @option {string} target\r\n*   identifier of the DIV tag where the component should be displayed\r\n\r\n* @option {boolean} [column_dendrogram=false]\r\n*   turn on/off the column dendrogram\r\n\r\n* @option {boolean} [count_column=false]\r\n*   turn on/off the count column\r\n\r\n* @option {boolean} [dendrogram=true]\r\n*   turn on/off the row dendrogram\r\n\r\n* @option {string} [font=\"Trebuchet&nbsp;MS\"]\r\n*   font family\r\n\r\n* @option {string} [heatmap_colors=\"Greens\"]\r\n*   the heatmap color scale\r\n\r\n* @option {number} [heatmap_part_width=0.7]\r\n*   define the heatmap part width from the width of the whole graph\r\n\r\n* @option {string} [highlight_colors=\"Reds\"]\r\n*   color scale for highlighted rows\r\n\r\n* @option {obejct} [highlighted_rows=[]]\r\n*   array of row IDs to highlight\r\n\r\n* @option {boolean} [independent_columns=true]\r\n*   determines whether the color scale is based on the values from all columns together or for each column separately\r\n\r\n* @option {string} [label_color=grey]\r\n*   color of column label\r\n\r\n* @option {number} [max_column_width=100]\r\n*   maximum column width in pixels\r\n\r\n* @option {number} [max_height=800]\r\n*   maximum graph height in pixels\r\n\r\n* @option {number} [max_row_height=25]\r\n*   maximum row height in pixels\r\n\r\n* @option {boolean} [metadata=false]\r\n*   turn on/off the metadata\r\n\r\n* @option {string} [metadata_colors=\"Oranges\"]\r\n*   the metadata color scale\r\n\r\n* @option {number} [min_row_height=false]\r\n*   minimum row height in pixels\r\n\r\n* @option {number} [width=\"the width of target DIV\"]\r\n*   width of the graph in pixels\r\n\r\n* @option {boolean} [heatmap=true]\r\n*   turn on/off the heatmap\r\n\r\n* @option {string} [heatmap_font_color=\"black\"]\r\n*   the color of the text values in the heatmap\r\n\r\n* @option {string} [count_column_colors=\"Reds\"]\r\n*   the color scale of count column\r\n\r\n* @option {boolean} [draw_row_ids=false]\r\n*   draws the row IDs next to the heatmap when there is enough space to visualize them\r\n\r\n* @option {boolean} [fixed_row_id_size=false]\r\n*   fixes the row id size on given number and extends the right margin of the visualization accordingly\r\n\r\n* @option {number} [max_percentile=100]\r\n*   the value percentile above which the color will be equal to the terminal color of the color scale\r\n\r\n* @option {number} [min_percentile=0]\r\n*   the value percentile below which the color will be equal to the beginning color of the color scale\r\n\r\n* @option {number} [middle_percentile=50]\r\n*   the value percentile which defines where the middle color of the color scale will be used\r\n\r\n* @option {array} [columns_order=[]]\r\n*   the order of columns defined by their indexes startin from 0, when not provided the columns are sorted in common order 0, 1, 2... etc.\r\n\r\n* @option {boolean} [alternative_data=false]\r\n*   use original data to compute heatmap but show the alternative values (alternative_data section must be present in input data)\r\n\r\n* @option {boolean} [images_as_alternative_data=false]\r\n*   alternative data values can be used to identify image files (.png, .jpg) and draw them insted of the heatmap values\r\n\r\n* @option {object} [images_path=false]\r\n*   when using images_as_alternative_data option - set dir path of the image files and the image files extension to generate the whole file path ({\"dir\": \"\", \"ext\": \"\"})\r\n\r\n* @option {object} [navigation_toggle={\"distance_scale\": false, \"filter_button\": false, \"export_button\": false, \"color_scale\": false, \"hint_button\": false}]\r\n*   toggle \"navigation\" features - true/false\r\n\r\n* \r\n* @example\r\n*       window.instance = new InCHlib({\r\n*                target : \"YourOwnDivId\",\r\n*                metadata: true, \r\n*                max_height: 800,\r\n*                width: 700,\r\n*                metadata_colors: \"RdLrBu\"\r\n*            });\r\n*       instance.read_data_from_file(\"../biojs/data/chembl_gr.json\");\r\n*       instance.draw();\r\n*/\r\n\r\nvar InCHlib, _this;\r\n\r\n  InCHlib = function(settings){\r\n     \r\n      _this = this;\r\n      _this.user_settings = settings;\r\n      _this.target_element = $(\"#\" + settings.target);\r\n      _this.target_element.css({\"position\": \"relative\"});\r\n      /**\r\n      * Default values for the settings\r\n      * @name InCHlib#settings\r\n      */\r\n\r\n      _this.settings = {\r\n          \"target\" : \"YourOwnDivId\",\r\n          \"heatmap_header\": {\r\n            \"draw\": true,\r\n            \"settings\":{\r\n              \"fontFamily\": \"sans-serif\",\r\n              \"fontSize\": 10,\r\n              \"rotation\": -80,\r\n              \"fill\": \"#000000\"\r\n            }\r\n          },\r\n          \"heatmap\": {\r\n            \"draw\": true,\r\n            \"colors\": {\r\n              \"scale\": \"Greens\",\r\n              \"value_type\": \"percentile\",\r\n              \"independent_columns\" : true,\r\n              \"params\": {\"min\": 0, \"middle\": 50, \"max\": 100}\r\n            },\r\n            \"columns_order\": [],\r\n            \"row_height\": {\"min\": 1, \"max\": 25},\r\n            \"column_width\": {\"max\": 150},\r\n            \"relative_width\": 0.7,\r\n            \"font\": {\r\n              \"fontFamily\": \"Helvetica\",\r\n              \"fill\": \"#000000\"\r\n            }\r\n          },\r\n          \"dendrogram\": {\r\n            \"draw\": true,\r\n            \"unified_distance\": false\r\n          },\r\n          \"metadata\": {\r\n            \"draw\": false,\r\n            \"colors\": {\r\n              \"independent_columns\" : true,\r\n              \"value_type\": \"percentile\",\r\n              \"scale\": \"Reds\",\r\n              \"params\": {\"min\": 0, \"middle\": 50, \"max\": 100},\r\n              \"value2color\": {},\r\n              \"default\": \"#F5F5F5\"\r\n            }\r\n          },\r\n          \"column_metadata\": {\r\n            \"draw\": true,\r\n            \"row_height\": 8,\r\n            \"feature_names\": {\r\n              \"draw\": true,\r\n              \"settings\": {\r\n                \"fontFamily\": \"Helvetica\",\r\n                \"fontSize\": undefined,\r\n                \"fill\": \"#000000\"\r\n              }\r\n            },\r\n            \"colors\": {\r\n              \"independent_columns\" : true,\r\n              \"value_type\": \"percentile\",\r\n              \"scale\": \"Reds\",\r\n              \"params\": {\"min\": 0, \"middle\": 50, \"max\": 100},\r\n              \"value2color\": {},\r\n              \"default\": \"#F5F5F5\"\r\n            }\r\n          },\r\n          \"row_ids\": {\r\n            \"draw\": false,\r\n            \"fixed_size\": false,\r\n            \"tooltip\": true\r\n          },\r\n          \"column_dendrogram\": {\r\n            \"draw\": true\r\n          },\r\n          \"count_column\": {\r\n            \"draw\": false,\r\n            \"colors\": \"Reds\"\r\n          },\r\n          \"max_height\" : 1200,\r\n          \"width\" : 1600,\r\n          \"highlight_colors\" : \"Oranges\",\r\n          \"highlighted_rows\" : [],\r\n          \"label_color\": \"#9E9E9E\",\r\n          \"alternative_data\": false,\r\n          \"images\": {\r\n            \"draw\": false,\r\n            \"path\": {\"dir\": \"\", \"ext\": \"\"}\r\n          },\r\n          \"navigation_toggle\": {\"color_scale\": true, \"distance_scale\": true, \"export_button\": true, \"filter_button\": true, \"hint_button\": true},\r\n      };\r\n\r\n      _this.update_settings(settings);\r\n      _this.settings.width = (settings.max_width && settings.max_width < target_width)?settings.max_width:_this.settings.width;\r\n      _this.settings.heatmap.relative_width = (_this.settings.heatmap.relative_width>0.9)?0.9:_this.settings.heatmap.relative_width;\r\n\r\n      _this.header_height = 150;\r\n      _this.footer_height = 70;\r\n      _this.dendrogram_heatmap_distance = 5;\r\n\r\n      /**\r\n      * Default function definitions for the InCHlib events\r\n      * @name InCHlib#events\r\n      */\r\n      _this.events = {\r\n          /**\r\n            * @name InCHlib#row_onclick\r\n            * @event\r\n            * @param {function} function() callback function for click on the heatmap row event\r\n            * @eventData {array} array array of object IDs represented by row\r\n            * @eventData {object} event event object\r\n\r\n            * @example \r\n            * instance.events.row_onclick = (\r\n            *    function(object_ids, evt) {\r\n            *       alert(object_ids);\r\n            *    }\r\n            * ); \r\n            * \r\n            */\r\n          \"row_click\": function(object_ids, evt){\r\n              return;\r\n          },\r\n\r\n          \"row_onclick\": function(object_ids, evt){\r\n              console.log('hererrere')\r\n              addMir(object_ids, settings.target)\r\n              _this.events.row_click(object_ids, evt);\r\n              return object_ids;\r\n          },\r\n\r\n          /**\r\n            * @name InCHlib#row_onmouseover\r\n            * @event\r\n            * @param {function} function() callback function for mouse cursor over the heatmap row event\r\n            * @eventData {array} array array of object IDs represented by row\r\n            * @eventData {object} event event object\r\n\r\n            * @example \r\n            * instance.events.row_onmouseover = (\r\n            *    function(object_ids, evt) {\r\n            *       alert(object_ids);\r\n            *    }\r\n            * ); \r\n            * \r\n            */\r\n          \"row_mouseover\": function(object_ids, evt){\r\n              return;\r\n          },\r\n\r\n          \"row_onmouseover\": function(object_ids, evt){\r\n              _this.events.row_mouseover(object_ids, evt);\r\n          },\r\n\r\n          /**\r\n            * @name InCHlib#row_onmouseout\r\n            * @event\r\n            * @param {function} function() callback function for mouse cursor out of the heatmap row event\r\n            * @eventData {object} event event object\r\n\r\n            * @example \r\n            * instance.events.row_onmouseout = (\r\n            *    function(evt) {\r\n            *       alert(\"now\");\r\n            *    }\r\n            * ); \r\n            * \r\n            */\r\n          \"row_mouseout\": function(evt){\r\n              return;\r\n          },\r\n\r\n          \"row_onmouseout\": function(evt){\r\n              _this.events.row_mouseout(evt);\r\n          },\r\n\r\n          /**\r\n            * @name InCHlib#dendrogram_node_onclick\r\n            * @event\r\n            * @param {function} function() callback function for dendrogram node click event\r\n            * @eventData {array} array array of object IDs represented by the node\r\n            * @eventData {string} node_id Id of the dendrogram node\r\n            * @eventData {object} event event object\r\n\r\n            * @example \r\n            * instance.events.dendrogram_node_onclick = (\r\n            *    function(object_ids, node_id, evt) {\r\n            *    alert(node_id + \": \" + object_ids.length+\" rows\");\r\n            *    }\r\n            * ); \r\n            * \r\n            */\r\n          \"dendrogram_node_click\": function(object_ids, node_id, evt){\r\n              return;\r\n          },\r\n\r\n          \"dendrogram_node_onclick\": function(object_ids, node_id, evt){\r\n              _this.events.dendrogram_node_click(object_ids, node_id, evt);\r\n          },\r\n\r\n          /**\r\n            * @name InCHlib#column_dendrogram_node_onclick\r\n            * @event\r\n            * @param {function} function() callback function for column dendrogram click event\r\n            * @eventData {array} array array of column indexes\r\n            * @eventData {string} node_id Id of the dendrogram node\r\n            * @eventData {object} event event object\r\n\r\n            * @example \r\n            * instance.events.column_dendrogram_node_onclick = (\r\n            *    function(column_ids, node_id, evt) {\r\n            *    alert(node_id + \": \" + column_ids.length+\" columns\");\r\n            *    }\r\n            * ); \r\n            * \r\n            */\r\n\r\n          \"column_dendrogram_node_click\": function(column_indexes, node_id, evt){\r\n              return;\r\n          },\r\n\r\n          \"column_dendrogram_node_onclick\": function(column_indexes, node_id, evt){\r\n              _this.events.column_dendrogram_node_click(column_indexes, node_id, evt);\r\n          },\r\n\r\n          /**\r\n            * @name InCHlib#dendrogram_node_highlight\r\n            * @event\r\n            * @param {function} function() callback function for the dendrogram node highlight event\r\n            * @eventData {array} array array of object IDs represented by row\r\n            * @eventData {string} node_id Id of the dendrogram node\r\n            * @eventData {object} event event object\r\n\r\n            * @example \r\n            * instance.events.dendrogram_node_highlight = (\r\n            *    function(object_ids, node_id, evt) {\r\n            *       alert(node_id + \": \" + object_ids.length+\" rows\");\r\n            *    }\r\n            * ); \r\n            * \r\n            */\r\n          \"dendrogram_node_highlight\": function(object_ids, node_id){\r\n              return;\r\n          },\r\n\r\n          /**\r\n            * @name InCHlib#column_dendrogram_node_highlight\r\n            * @event\r\n            * @param {function} function() callback function for the column dendrogram node highlight event\r\n            * @eventData {array} array array of column indexes\r\n            * @eventData {string} node_id Id of the dendrogram node\r\n            * @eventData {object} event event object\r\n\r\n            * @example \r\n            * instance.events.column_dendrogram_node_highlight = (\r\n            *    function(object_ids, node_id, evt) {\r\n            *       alert(node_id + \": \" + object_ids.length+\" columns\");\r\n            *    }\r\n            * ); \r\n            * \r\n            */\r\n          \"column_dendrogram_node_highlight\": function(column_indexes, node_id){\r\n              return;\r\n          },\r\n\r\n          /**\r\n            * @name InCHlib#dendrogram_node_unhighlight\r\n            * @event\r\n            * @param {function} function() callback function for the dendrogram node unhighlight event\r\n            * @eventData {string} node_id Id of the dendrogram node\r\n\r\n            * @example \r\n            * instance.events.dendrogram_node_unhighlight = (\r\n            *    function(node_id) {\r\n            *       alert(node_id);\r\n            *    }\r\n            * ); \r\n            * \r\n            */\r\n          \"dendrogram_node_unhighlight\": function(node_id){\r\n              return;\r\n          },\r\n\r\n          /**\r\n            * @name InCHlib#column_dendrogram_node_unhighlight\r\n            * @event\r\n            * @param {function} function() callback function for the column dendrogram node unhighlight event\r\n            * @eventData {string} node_id Id of the column dendrogram node\r\n\r\n            * @example \r\n            * instance.events.column_dendrogram_node_unhighlight = (\r\n            *    function(node_id) {\r\n            *       alert(node_id);\r\n            *    }\r\n            * ); \r\n            * \r\n            */\r\n            \"column_dendrogram_node_unhighlight\": function(node_id){\r\n                return;\r\n            },\r\n\r\n          /**\r\n            * @name InCHlib#heatmap_onmouseout\r\n            * @event\r\n            * @param {function} function() callback function for mouse cursor out of hte heatmap area\r\n            * @eventData {object} event event object\r\n\r\n            * @example \r\n            * instance.events.heatmap_onmouseout = (\r\n            *    function(evt) {\r\n            *       alert(\"now\");\r\n            *    }\r\n            * ); \r\n            * \r\n            */\r\n          \"heatmap_onmouseout\": function(evt){\r\n              return;\r\n          },\r\n\r\n          /**\r\n            * @name InCHlib#on_zoom\r\n            * @event\r\n            * @param {function} function() callback function for zoom event\r\n            * @eventData {string} node_id Id of the dendrogram node\r\n\r\n            * @example \r\n            * instance.events.on_zoom = (\r\n            *    function(node_id) {\r\n            *       alert(node_id);\r\n            *    }\r\n            * ); \r\n            * \r\n            */\r\n          \"on_zoom\": function(object_ids, node_id){\r\n              return;\r\n          },\r\n\r\n          /**\r\n            * @name InCHlib#on_unzoom\r\n            * @event\r\n            * @param {function} function() callback function for unzoom event\r\n            * @eventData {string} node_id Id of the dendrogram node\r\n\r\n            * @example \r\n            * instance.events.on_unzoom = (\r\n            *    function(node_id) {\r\n            *       alert(node_id);\r\n            *    }\r\n            * ); \r\n            * \r\n            */\r\n          \"on_unzoom\": function(node_id){\r\n              return;\r\n          },\r\n\r\n          /**\r\n            * @name InCHlib#on_columns_zoom\r\n            * @event\r\n            * @param {function} function() callback function for columns zoom event\r\n            * @eventData {array} array array of column indexes\r\n            * @eventData {string} node_id Id of the column dendrogram node\r\n\r\n            * @example \r\n            * instance.events.on_columns_zoom = (\r\n            *    function(column_indexes, node_id) {\r\n            *       alert(column_indexes, node_id);\r\n            *    }\r\n            * ); \r\n            * \r\n            */\r\n          \"on_columns_zoom\": function(column_indexes, node_id){\r\n              return;\r\n          },\r\n\r\n          /**\r\n            * @name InCHlib#on_columns_unzoom\r\n            * @event\r\n            * @param {function} function() callback function for columns unzoom event\r\n            * @eventData {string} node_id Id of the column dendrogram node\r\n\r\n            * @example \r\n            * instance.events.on_columns_unzoom = (\r\n            *    function(node_id) {\r\n            *       alert(node_id);\r\n            *    }\r\n            * ); \r\n            * \r\n            */\r\n          \"on_columns_unzoom\": function(node_id){\r\n              return;\r\n          },\r\n\r\n          /**\r\n            * @name InCHlib#on_refresh\r\n            * @event\r\n            * @param {function} function() callback function for refresh icon click event\r\n            * @eventData {object} event event object\r\n            * @example \r\n            * instance.events.on_refresh = (\r\n            *    function() {\r\n            *       alert(\"now\");\r\n            *    }\r\n            * ); \r\n            * \r\n            */\r\n          \"on_refresh\": function(){\r\n              return;\r\n          },\r\n\r\n          /**\r\n            * @name InCHlib#empty_space_onclick\r\n            * @event\r\n            * @param {function} function() callback function for click on empty(inactive) space in the visualization (e.g., around the heatmap)\r\n            * @eventData {object} event event object\r\n\r\n            * @example \r\n            * instance.events.empty_space_onclick = (\r\n            *    function(evt) {\r\n            *       alert(\"now\");\r\n            *    }\r\n            * ); \r\n            * \r\n            */\r\n\r\n          \"empty_space_click\": function(evt){\r\n              return;\r\n          },\r\n\r\n          \"empty_space_onclick\": function(evt){\r\n              _this.events.empty_space_click(evt);\r\n          },\r\n\r\n          /**\r\n            * @name InCHlib#cell_click\r\n            * @event\r\n            * @param {function} function() callback function for click on a cell in a heatmap row\r\n            * @eventData {object} object containing value and header attributes\r\n            * @eventData {object} event event object\r\n\r\n            * @example \r\n            * instance.events.cell_click = (\r\n            *    function(obj, evt) {\r\n            *       alert(obj);\r\n            *    }\r\n            * ); \r\n            * \r\n            */\r\n          \"cell_click\" : function(obj, evt){\r\n            return;\r\n          },\r\n\r\n          /**\r\n            * @name InCHlib#cell_mouseover\r\n            * @event\r\n            * @param {function} function() callback function for the mouseover event of a cell in a heatmap row\r\n            * @eventData {object} object containing value and header attributes\r\n            * @eventData {object} event event object\r\n\r\n            * @example \r\n            * instance.events.cell_mouseover = (\r\n            *    function(obj, evt) {\r\n            *       alert(obj);\r\n            *    }\r\n            * ); \r\n            * \r\n            */\r\n          \"cell_mouseover\" : function(obj, evt){\r\n            return;\r\n          }\r\n\r\n      }\r\n\r\n      /**\r\n      * Default color scales\r\n      * @name InCHlib#colors\r\n      */\r\n      _this.colors = {\r\n              \"YlGn\": {\"start\": {\"r\":255, \"g\": 255, \"b\": 204}, \"end\": {\"r\": 35, \"g\": 132, \"b\": 67}},\r\n              \"GnBu\": {\"start\": {\"r\":240, \"g\": 249, \"b\": 232}, \"end\": {\"r\": 43, \"g\": 140, \"b\": 190}},\r\n              \"BuGn\": {\"start\": {\"r\":237, \"g\": 248, \"b\": 251}, \"end\": {\"r\": 35, \"g\": 139, \"b\": 69}},\r\n              \"PuBu\": {\"start\": {\"r\":241, \"g\": 238, \"b\": 246}, \"end\": {\"r\": 5, \"g\": 112, \"b\": 176}},\r\n              \"BuPu\": {\"start\": {\"r\":237, \"g\": 248, \"b\": 251}, \"end\": {\"r\": 136, \"g\": 65, \"b\": 157}},\r\n              \"RdPu\": {\"start\": {\"r\":254, \"g\": 235, \"b\": 226}, \"end\": {\"r\": 174, \"g\": 1, \"b\": 126}},\r\n              \"PuRd\": {\"start\": {\"r\":241, \"g\": 238, \"b\": 246}, \"end\": {\"r\": 206, \"g\": 18, \"b\": 86}},\r\n              \"OrRd\": {\"start\": {\"r\":254, \"g\": 240, \"b\": 217}, \"end\": {\"r\": 215, \"g\": 48, \"b\": 31}},\r\n              \"Purples2\": {\"start\": {\"r\":242, \"g\": 240, \"b\": 247}, \"end\": {\"r\": 106, \"g\": 81, \"b\": 163}},\r\n              \"Blues\": {\"start\": {\"r\":239, \"g\": 243, \"b\": 255}, \"end\": {\"r\": 33, \"g\": 113, \"b\": 181}},\r\n              \"Greens\": {\"start\": {\"r\":237, \"g\": 248, \"b\": 233}, \"end\": {\"r\": 35, \"g\": 139, \"b\": 69}},\r\n              \"Oranges\": {\"start\": {\"r\":254, \"g\": 237, \"b\": 222}, \"end\": {\"r\": 217, \"g\": 71, \"b\": 1}},\r\n              \"Reds\": {\"start\": {\"r\":254, \"g\": 229, \"b\": 217}, \"end\": {\"r\": 203, \"g\": 24, \"b\": 29}},\r\n              \"Greys\": {\"start\": {\"r\":247, \"g\": 247, \"b\": 247}, \"end\": {\"r\": 82, \"g\": 82, \"b\": 82}},\r\n              \"PuOr\": {\"start\": {\"r\":230, \"g\": 97, \"b\": 1}, \"end\": {\"r\": 94, \"g\": 60, \"b\": 153}},\r\n              \"BrBG\": {\"start\": {\"r\":166, \"g\": 97, \"b\": 26}, \"end\": {\"r\": 1, \"g\": 133, \"b\": 113}},\r\n              \"RdBu\": {\"start\": {\"r\":202, \"g\": 0, \"b\": 32}, \"end\": {\"r\": 5, \"g\": 113, \"b\": 176}},\r\n              \"RdGy\": {\"start\": {\"r\":202, \"g\": 0, \"b\": 32}, \"end\": {\"r\": 64, \"g\": 64, \"b\": 64}},\r\n              \"BuYl\": {\"start\": {\"r\": 5, \"g\": 113, \"b\": 176}, \"end\": {\"r\": 250, \"g\": 233, \"b\": 42}},\r\n              \"YlOrR\": {\"start\": {\"r\":255, \"g\": 255, \"b\": 178}, \"end\": {\"r\": 227, \"g\": 26, \"b\": 28}, \"middle\": {\"r\": 204, \"g\": 76, \"b\": 2}},\r\n              \"YlOrB\": {\"start\": {\"r\":255, \"g\": 255, \"b\": 212}, \"end\": {\"r\": 5, \"g\": 112, \"b\": 176}, \"middle\": {\"r\": 204, \"g\": 76, \"b\": 2}},\r\n              \"PRGn2\": {\"start\": {\"r\":123, \"g\": 50, \"b\": 148}, \"end\": {\"r\": 0, \"g\": 136, \"b\": 55}, \"middle\": {\"r\":202, \"g\": 0, \"b\": 32}},\r\n              \"PiYG2\": {\"start\": {\"r\":208, \"g\": 28, \"b\": 139}, \"end\": {\"r\": 77, \"g\": 172, \"b\": 38}, \"middle\": {\"r\":255, \"g\": 255, \"b\": 178},},\r\n              \"YlGnBu\": {\"start\": {\"r\":255, \"g\": 255, \"b\": 204}, \"end\": {\"r\": 34, \"g\": 94, \"b\": 168}, \"middle\": {\"r\": 35, \"g\": 132, \"b\": 67}},\r\n              \"RdYlBu\": {\"start\": {\"r\":215, \"g\": 25, \"b\": 28}, \"end\": {\"r\": 44, \"g\": 123, \"b\": 182}, \"middle\": {\"r\":255, \"g\": 255, \"b\": 178}},\r\n              \"RdYlGn\": {\"start\": {\"r\":215, \"g\": 25, \"b\": 28}, \"end\": {\"r\": 26, \"g\": 150, \"b\": 65}, \"middle\": {\"r\":255, \"g\": 255, \"b\": 178}},\r\n              \"BuWhRd\": {\"start\": {\"r\": 33, \"g\": 113, \"b\": 181}, \"middle\": {\"r\": 255, \"g\": 255, \"b\": 255}, \"end\": {\"r\":215, \"g\": 25, \"b\": 28}},\r\n              \"RdLrBu\": {\"start\": {\"r\":215, \"g\": 25, \"b\": 28}, \"middle\": {\"r\":254, \"g\": 229, \"b\": 217}, \"end\": {\"r\": 44, \"g\": 123, \"b\": 182}},\r\n              \"RdBkGr\": {\"start\": {\"r\":215, \"g\": 25, \"b\": 28}, \"middle\": {\"r\": 0, \"g\": 0, \"b\": 0}, \"end\": {\"r\": 35, \"g\": 139, \"b\": 69}},\r\n              \"RdLrGr\": {\"start\": {\"r\":215, \"g\": 25, \"b\": 28}, \"middle\": {\"r\":254, \"g\": 229, \"b\": 217}, \"end\": {\"r\": 35, \"g\": 139, \"b\": 69}},\r\n      };\r\n\r\n      /**\r\n      * Default konvajs objects references\r\n      * @name InCHlib#objects_ref\r\n      */\r\n      _this.objects_ref = {\r\n          \"tooltip_label\": new Konva.Label({\r\n                              opacity: 1,\r\n                              listening: false,\r\n                              preventDefault: false\r\n                           }),\r\n\r\n          \"tooltip_tag\": new Konva.Tag({\r\n                              fill: _this.settings.label_color,\r\n                              pointerWidth: 10,\r\n                              pointerHeight: 10,\r\n                              lineJoin: 'round',\r\n                              listening: false,\r\n                              preventDefault: false\r\n                          }),\r\n      \r\n          \"tooltip_text\": new Konva.Text({\r\n                              fontFamily: _this.settings.heatmap.font.fontFamily,\r\n                              fontSize: 12,\r\n                              padding: 8,\r\n                              fill: 'white',\r\n                              fontStyle: \"bold\",\r\n                              listening: false,\r\n                              align: \"center\",\r\n                              lineHeight: 1.2,\r\n                              preventDefault: false\r\n                          }),\r\n\r\n          \"node\": new Konva.Line({\r\n                              stroke: \"grey\",\r\n                              strokeWidth: 2,\r\n                              lineCap: 'sqare',\r\n                              lineJoin: 'round',\r\n                              listening: false,\r\n                              preventDefault: false\r\n                          }),\r\n\r\n          \"node_rect\" : new Konva.Rect({\r\n                              fill: \"white\",\r\n                              opacity: 0,\r\n                              preventDefault: false\r\n                          }),\r\n\r\n          \"icon_overlay\": new Konva.Rect({\r\n                              width: 32,\r\n                              height: 32,\r\n                              opacity: 0,\r\n                              preventDefault: false\r\n                          }),\r\n\r\n          \"heatmap_value\": new Konva.Text({\r\n                              fontFamily: _this.settings.heatmap.font.fontFamily,\r\n                              fill: _this.settings.heatmap.font.fill,\r\n                              fontStyle: \"bold\",\r\n                              listening: false,\r\n                              preventDefault: false\r\n                          }),\r\n\r\n          \"heatmap_line\": new Konva.Line({\r\n                             lineCap: 'butt',\r\n                             value: false,\r\n                             preventDefault: false\r\n                          }),\r\n\r\n          \"column_header\": new Konva.Text({\r\n                              fontFamily: _this.settings.heatmap.font.fontFamily,\r\n                              fontStyle: \"bold\",\r\n                              fill: 'black',\r\n                              preventDefault: false\r\n                           }),\r\n\r\n          \"count\": new Konva.Text({\r\n                          fontSize: 10,\r\n                          fill: \"#6d6b6a\",\r\n                          fontFamily: _this.settings.heatmap.font.fontFamily,\r\n                          fontStyle: 'bold',\r\n                          listening: false,\r\n                          preventDefault: false\r\n                       }),\r\n\r\n          \"cluster_overlay\": new Konva.Rect({\r\n                                  fill: \"white\",\r\n                                  opacity: 0.5,\r\n                                  preventDefault: false\r\n                              }),\r\n\r\n          \"cluster_border\": new Konva.Line({\r\n                                  stroke: \"black\",\r\n                                  strokeWidth: 1,\r\n                                  dash: [6,2],\r\n                                  preventDefault: false\r\n                              }),\r\n\r\n          \"icon\": new Konva.Path({\r\n                      fill: \"grey\",\r\n                      preventDefault: false\r\n                  }),\r\n\r\n          \"rect_gradient\": new Konva.Rect({\r\n                              x: 0,\r\n                              y: 80,\r\n                              width: 80,\r\n                              height: 20,\r\n                              fillLinearGradientStartPoint: {x: 0, y: 80},\r\n                              fillLinearGradientEndPoint: {x: 100, y: 80},\r\n                              stroke: \"#D2D2D2\",\r\n                              strokeWidth: \"1px\",\r\n                              preventDefault: false\r\n                          }),\r\n\r\n          \"image\": new Konva.Image({\r\n                      stroke: \"#D2D2D2\",\r\n                      strokeWidth: 1,\r\n                      preventDefault: false\r\n                  }),\r\n      };\r\n\r\n      _this.paths_ref = {\r\n            \"zoom_icon\": \"M22.646,19.307c0.96-1.583,1.523-3.435,1.524-5.421C24.169,8.093,19.478,3.401,13.688,3.399C7.897,3.401,3.204,8.093,3.204,13.885c0,5.789,4.693,10.481,10.484,10.481c1.987,0,3.839-0.563,5.422-1.523l7.128,7.127l3.535-3.537L22.646,19.307zM13.688,20.369c-3.582-0.008-6.478-2.904-6.484-6.484c0.006-3.582,2.903-6.478,6.484-6.486c3.579,0.008,6.478,2.904,6.484,6.486C20.165,17.465,17.267,20.361,13.688,20.369zM15.687,9.051h-4v2.833H8.854v4.001h2.833v2.833h4v-2.834h2.832v-3.999h-2.833V9.051z\",\r\n            \"unzoom_icon\": \"M22.646,19.307c0.96-1.583,1.523-3.435,1.524-5.421C24.169,8.093,19.478,3.401,13.688,3.399C7.897,3.401,3.204,8.093,3.204,13.885c0,5.789,4.693,10.481,10.484,10.481c1.987,0,3.839-0.563,5.422-1.523l7.128,7.127l3.535-3.537L22.646,19.307zM13.688,20.369c-3.582-0.008-6.478-2.904-6.484-6.484c0.006-3.582,2.903-6.478,6.484-6.486c3.579,0.008,6.478,2.904,6.484,6.486C20.165,17.465,17.267,20.361,13.688,20.369zM8.854,11.884v4.001l9.665-0.001v-3.999L8.854,11.884z\",\r\n            \"lightbulb\": \"M15.5,2.833c-3.866,0-7,3.134-7,7c0,3.859,3.945,4.937,4.223,9.499h5.553c0.278-4.562,4.224-5.639,4.224-9.499C22.5,5.968,19.366,2.833,15.5,2.833zM15.5,28.166c1.894,0,2.483-1.027,2.667-1.666h-5.334C13.017,27.139,13.606,28.166,15.5,28.166zM12.75,25.498h5.5v-5.164h-5.5V25.498z\"\r\n      };\r\n      \r\n  }\r\n\r\n  InCHlib.prototype._update_user_settings = function(settings){\r\n    var _this = this;\r\n    _this.update_settings(settings);\r\n  }\r\n\r\n  /**\r\n    * Read data from JSON variable.\r\n    * \r\n    * @param {object} [variable] Clustering in proper JSON format.\r\n    */\r\n  InCHlib.prototype.read_data = function(json){\r\n    var _this = this;\r\n    _this.json = json;\r\n    _this.data = _this.json.data;\r\n    console.log('asdsadasdadad')\r\n    console.log(json['data'])\r\n    var settings = {\"metadata\": {}, \"column_dendrogram\": {}, \"column_metadata\": {}};\r\n    if(json[\"metadata\"] !== undefined && _this.settings.metadata.draw){\r\n      _this.metadata = json.metadata;\r\n      settings.metadata.draw = true;\r\n    }\r\n    else{\r\n      settings.metadata.draw = false;\r\n    }\r\n    if(json[\"column_dendrogram\"] !== undefined && _this.settings.column_dendrogram.draw){\r\n      _this.column_dendrogram = json.column_dendrogram;\r\n      settings.column_dendrogram.draw = true;\r\n      settings.heatmap_header = {\"settings\": {\"rotation\": -1*_this.settings.heatmap_header.settings.rotation}};\r\n    }\r\n    else{\r\n      settings.column_dendrogram.draw = false;\r\n    }\r\n    console.log('json[\"column_metadata\"]'+_this.settings['column_metadata']);\r\n    console.log('json.column_metadata' + JSON.stringify(json.column_metadata));\r\n\r\n    if(json[\"column_metadata\"] !== undefined && _this.settings.column_metadata.draw){\r\n      _this.column_metadata = json.column_metadata;\r\n      settings.column_metadata.draw = true;\r\n    }\r\n    else{\r\n      settings.column_metadata.draw = false;\r\n    }\r\n\r\n    if(_this.json[\"alternative_data\"] !== undefined && _this.settings.alternative_data){\r\n      _this.alternative_data = _this.json.alternative_data.nodes;\r\n    }\r\n    else{\r\n      settings.alternative_data = false; \r\n    }\r\n\r\n    if((_this.data.feature_names !== undefined && _this.data.feature_names.length > 0)||(_this.metadata !== undefined && _this.metadata.feature_names !== undefined && _this.metadata.feature_names.length > 0)){\r\n      _this.settings.heatmap_header.draw = true;\r\n    }\r\n    else{\r\n      _this.settings.heatmap_header.draw = false;\r\n    }\r\n\r\n    _this._update_user_settings(settings);\r\n    _this._add_prefix();\r\n    _this.node_ids = Object.keys(_this.data.nodes);\r\n    _this.leaf_ids = _this.node_ids.filter(x => _this.data.nodes[x].count === 1);\r\n  }\r\n\r\n  /**\r\n    * Read data from JSON file.\r\n    * \r\n    * @param {string} [filename] Path to the JSON data file.\r\n    *\r\n    */\r\n  InCHlib.prototype.send_json = function(json){      \r\n    var _this = this;\r\n     _this.read_data(json);\r\n\r\n  }\r\n\r\n  InCHlib.prototype._add_prefix = function(){\r\n    var _this = this;\r\n      _this.data.nodes = _this._add_prefix_to_data(_this.data.nodes);\r\n\r\n      if(_this.settings.metadata.draw){\r\n        var metadata = {};\r\n        for(var i = 0, keys = Object.keys(_this.metadata.nodes), len = keys.length; i < len; i++){\r\n            id = [_this.settings.target, keys[i]].join(\"#\");\r\n            metadata[id] = _this.metadata.nodes[keys[i]];\r\n        }\r\n        _this.metadata.nodes = metadata;\r\n      }\r\n\r\n      if(_this.settings.alternative_data){\r\n        var alternative_data = {};\r\n        for(var i = 0, keys = Object.keys(_this.alternative_data), len = keys.length; i < len; i++){\r\n            id = [_this.settings.target, keys[i]].join(\"#\");\r\n            alternative_data[id] = _this.alternative_data[keys[i]];\r\n        }\r\n        _this.alternative_data = alternative_data;\r\n      }\r\n\r\n      if(_this.column_dendrogram){\r\n        _this.column_dendrogram.nodes = _this._add_prefix_to_data(_this.column_dendrogram.nodes);\r\n      }\r\n  }\r\n\r\n  InCHlib.prototype._add_prefix_to_data = function(data){\r\n    var _this = this;\r\n    var id, prefixed_data = {};\r\n\r\n    for(var i = 0, keys = Object.keys(data), len = keys.length; i < len; i++){\r\n        id = [_this.settings.target, keys[i]].join(\"#\");\r\n        prefixed_data[id] = data[keys[i]];\r\n        \r\n        if(prefixed_data[id][\"parent\"] !== undefined){\r\n            prefixed_data[id].parent = [_this.settings.target, prefixed_data[id].parent].join(\"#\");\r\n        }\r\n\r\n        if(prefixed_data[id][\"count\"] != 1){\r\n            prefixed_data[id].left_child = [_this.settings.target, prefixed_data[id].left_child].join(\"#\");\r\n            prefixed_data[id].right_child = [_this.settings.target, prefixed_data[id].right_child].join(\"#\");\r\n        }\r\n    }\r\n    return prefixed_data;\r\n  }\r\n\r\n  InCHlib.prototype._get_root_id = function(nodes){\r\n    var _this = this;\r\n    var root_id;\r\n      for(var i = 0, keys = Object.keys(nodes), len = keys.length; i < len; i++){\r\n          if(nodes[keys[i]][\"parent\"] === undefined){\r\n              root_id = keys[i];\r\n              break;\r\n          }\r\n      }\r\n      return root_id;\r\n  }\r\n\r\n  InCHlib.prototype._get_dimensions = function(){\r\n    var _this = this;\r\n      var dimensions = {\"data\": 0, \"metadata\": 0, \"overall\": 0}, key, keys, i;\r\n\r\n      if(_this.settings.images.draw){\r\n        dimensions[\"data\"] = _this.alternative_data[_this.leaf_ids[0]].length;\r\n      }\r\n      else{\r\n        dimensions[\"data\"] = _this.data.nodes[_this.leaf_ids[0]].features.length;\r\n      }\r\n\r\n      if(_this.settings.metadata.draw){\r\n        dimensions[\"metadata\"] = _this.metadata.nodes[_this.leaf_ids[0]].length;\r\n      }\r\n      \r\n      dimensions[\"overall\"] = dimensions[\"data\"] + dimensions[\"metadata\"];\r\n      return dimensions;\r\n  }\r\n\r\n  InCHlib.prototype._get_min_max_middle = function(data){\r\n    var _this = this;\r\n    var all = [];\r\n\r\n    for(var i = 0, len = data.length; i<len; i++){\r\n        all = all.concat(data[i].filter(function(x){return x !== null}));\r\n    }\r\n\r\n    var len = all.length;\r\n    all.sort(function(a,b){return a - b});\r\n    \r\n    var min = (_this.settings.heatmap.colors.params.min > 0)?all[_this._hack_round(len*_this.settings.heatmap.colors.params.min/100)]:Math.min.apply(null, all);\r\n    var max = (_this.settings.heatmap.colors.params.max < 100)?all[_this._hack_round(len*_this.settings.heatmap.colors.params.max/100)]:Math.max.apply(null, all)\r\n    var middle = (_this.settings.heatmap.colors.params.middle != 50)?all[_this._hack_round(len*_this.settings.heatmap.colors.params.middle/100)]:all[_this._hack_round((len-1)/2)]\r\n    return [min, max, middle];\r\n  }\r\n\r\n  InCHlib.prototype._get_data_min_max_middle = function(data, axis, section){\r\n    var _this = this;\r\n    if(axis === undefined){\r\n        axis = \"column\";\r\n    }\r\n\r\n    if(section === undefined){\r\n      var section = \"heatmap\";\r\n    }\r\n    var data2descs = {}\r\n\r\n    var i, j, value, len, columns;\r\n    var data_length = data[0].length;\r\n\r\n    if(axis == \"column\"){\r\n        columns = [];\r\n\r\n        for(i = 0; i<data_length; i++){\r\n            columns.push([]);\r\n        }\r\n\r\n        for(i = 0; i<data.length; i++){\r\n            for(j = 0; j < data_length; j++){\r\n                value = data[i][j];\r\n                if(value !== null && value !== undefined){\r\n                    columns[j].push(value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else{\r\n      columns = data.slice(0);\r\n    }\r\n\r\n    var data_min_max_middle = [], min, max, middle;\r\n    \r\n    if(_this.settings[section].value_type === \"value\"){\r\n      for(i = 0; i<columns.length; i++){\r\n        data2descs[i] = $.extend({}, _this.settings[section].colors.params);  \r\n      }\r\n    }\r\n    else{\r\n      for(i = 0; i<columns.length; i++){\r\n          if(_this._is_number(columns[i][0])){\r\n              columns[i] = columns[i].map(parseFloat);\r\n              columns[i].sort(function(a,b){return a - b});\r\n\r\n              len = columns[i].length;\r\n              max = (_this.settings[section].colors.params.max < 100)?columns[i][_this._hack_round(len*_this.settings[section].colors.params.max/100) - 1]:Math.max.apply(null, columns[i]);\r\n              min = (_this.settings[section].colors.params.min > 0)?columns[i][_this._hack_round(len*_this.settings[section].colors.params.min/100)]:Math.min.apply(null, columns[i]);\r\n              middle = (_this.settings[section].colors.params.middle != 50)?columns[i][_this._hack_round(len*_this.settings[section].colors.params.middle/100)]:columns[i][_this._hack_round((len-1)/2)];\r\n              \r\n              data2descs[i] = {\"min\": min, \"max\": max, \"middle\": middle};\r\n          }\r\n          else{\r\n              var hash_object = _this._get_hash_object(columns[i]);\r\n              min = 0;\r\n              max = _this._hack_size(hash_object)-1;\r\n              middle = max/2;\r\n              data2descs[i] = {\"min\": min, \"max\": max, \"middle\": middle, \"str2num\": hash_object};\r\n          }\r\n      }\r\n    }\r\n\r\n\r\n    return data2descs;\r\n  }\r\n\r\n  InCHlib.prototype._get_hash_object = function(array){\r\n    var _this = this;\r\n      var i, count=0, hash_object = {};\r\n\r\n      for(i = 0; i<array.length; i++){\r\n          if(hash_object[array[i]] === undefined){\r\n              hash_object[array[i]] = count;\r\n              count++;\r\n          }\r\n      }\r\n      return hash_object;\r\n  }\r\n\r\n  InCHlib.prototype._get_max_length = function(items){\r\n    var _this = this;\r\n      var lengths = items.map(function(x){return (\"\"+x).length});\r\n      var max = Math.max.apply(Math, lengths);\r\n      return max;\r\n  }\r\n\r\n  InCHlib.prototype._get_max_value_length = function(){\r\n    var _this = this;\r\n    var max_length = 0;\r\n    var node_data, key;\r\n\r\n    if(_this.settings.images.draw){\r\n      max_length = 0;\r\n    }\r\n    else{\r\n      if(_this.settings.alternative_data){\r\n        var values = _this.current_leaf_ids.map(v => _this.alternative_data[v]);\r\n      }\r\n      else{\r\n        var values = _this.current_leaf_ids.map(v => _this.data.nodes[v].features);\r\n      }\r\n\r\n      if(_this.settings.metadata.draw){\r\n        values = values.concat(_this.current_leaf_ids.map(v => _this.metadata.nodes[v]));\r\n      }\r\n\r\n      for(var i = 0, len = values.length; i < len; i++){\r\n        /*value = values[i];*/\r\n        node_data = values[i];\r\n        for(var j = 0, len_2 = node_data.length; j < len_2; j++){\r\n            if((\"\"+node_data[j]).length > max_length){\r\n                max_length = (\"\"+node_data[j]).length;\r\n            }\r\n        }\r\n      }\r\n    }\r\n    return max_length;\r\n  }\r\n\r\n  InCHlib.prototype._preprocess_heatmap_data = function(){\r\n    var _this = this;\r\n      var heatmap_array = [], i, j = 0, keys, key, len, data, node;\r\n\r\n      for(i = 0, len = _this.node_ids.length; i < len; i++){\r\n          key = _this.node_ids[i];\r\n          node = _this.data.nodes[key];\r\n          if(node.count == 1){\r\n              data = node.features;\r\n              heatmap_array.push([key]);\r\n              heatmap_array[j].push.apply(heatmap_array[j], data);\r\n              if(_this.settings.metadata.draw){\r\n                  heatmap_array[j].push.apply(heatmap_array[j], _this.metadata.nodes[key]);\r\n              }\r\n              j++;\r\n          }\r\n      }\r\n      return heatmap_array;\r\n  }\r\n\r\n  InCHlib.prototype._reorder_heatmap = function(column_index){\r\n    var _this = this;\r\n      _this.leaves_y_coordinates = {};\r\n      column_index++;\r\n      \r\n      if(_this.ordered_by_index == column_index){\r\n          _this.heatmap_array.reverse();\r\n      }\r\n      else{\r\n          if(_this._is_number(_this.heatmap_array[0][column_index])){\r\n            _this.heatmap_array.sort(function(a,b){return (a[column_index] == null)?-1:(b[column_index] == null)?1:a[column_index] - b[column_index]});\r\n          }\r\n          else{\r\n            _this.heatmap_array.sort(function(a,b){return (a[column_index] == null)?-1:(b[column_index] == null)?1:(a[column_index] > b[column_index])?1:(a[column_index] < b[column_index])?-1:0});\r\n          }\r\n      }\r\n\r\n      var y = _this.top_heatmap_distance;\r\n\r\n      for(var i = 0, len = _this.heatmap_array.length; i<len; i++){\r\n          _this.leaves_y_coordinates[_this.heatmap_array[i][0]] = y;\r\n          y += _this.pixels_for_leaf;\r\n      }\r\n\r\n      _this.ordered_by_index = column_index;\r\n  }\r\n\r\n  /**\r\n    * Draw already read data (from file/JSON variable).\r\n    */\r\n  InCHlib.prototype.draw = function(){\r\n    console.time(\"DRAW\");\r\n    var _this = this;\r\n    _this.zoomed_clusters = {\"row\": [], \"column\": []};\r\n    _this.last_highlighted_cluster = null;\r\n    _this.current_object_ids = [];\r\n    _this.current_column_ids = [];\r\n    _this.highlighted_rows_y = [];\r\n    _this.heatmap_array = _this._preprocess_heatmap_data();\r\n    _this.on_features = {\"data\":[], \"metadata\":[], \"count_column\": []};\r\n\r\n    _this.column_metadata_rows = (_this.settings.column_metadata.draw)?_this.column_metadata.features.length:0;\r\n    _this.column_metadata_height = _this.column_metadata_rows * _this.settings.column_metadata.row_height;\r\n\r\n    if(_this.settings.heatmap.draw){\r\n      _this.last_column = null;\r\n      _this.dimensions = _this._get_dimensions();\r\n      _this._set_heatmap_settings();\r\n    }\r\n    else{\r\n      _this.dimensions = {\"data\": 0, \"metadata\": 0, \"overall\": 0};\r\n      _this.settings.heatmap_header.draw = false;\r\n      _this.settings.column_dendrogram.draw = false;\r\n    }\r\n    _this._adjust_leaf_size(_this.heatmap_array.length);\r\n\r\n    if(_this.settings.row_ids.draw){\r\n      _this._get_row_id_size();\r\n    }\r\n    else{\r\n      _this.right_margin = 100;\r\n    }\r\n\r\n    _this._adjust_horizontal_sizes();\r\n    _this.top_heatmap_distance = _this.header_height + _this.column_metadata_height + _this.settings.column_metadata.row_height/2;\r\n\r\n    if(_this.settings.column_dendrogram.draw && _this.heatmap_header){\r\n        _this.footer_height = 150;\r\n    }\r\n\r\n    _this.stage = new Konva.Stage({\r\n        container: _this.settings.target,\r\n    });\r\n\r\n    _this.settings.height = _this.heatmap_array.length*_this.pixels_for_leaf+_this.header_height+_this.footer_height;\r\n    _this.stage.setWidth(_this.settings.width);\r\n    _this.stage.setHeight(_this.settings.height);\r\n    _this._draw_stage_layer();\r\n    \r\n    if(_this.settings.dendrogram.draw || _this.settings.column_dendrogram.draw){\r\n      _this.timer = 0;\r\n      _this._draw_dendrogram_layers();\r\n    }\r\n\r\n    if(_this.settings.dendrogram.draw){\r\n      console.time(\"DENDROGRAM\")\r\n      _this.root_id = _this._get_root_id(_this.data.nodes);\r\n      _this._draw_row_dendrogram(_this.root_id);\r\n      console.timeEnd(\"DENDROGRAM\")\r\n    }\r\n    else{\r\n      _this._reorder_heatmap(0);\r\n      _this.ordered_by_index = 0;\r\n    }\r\n\r\n    if(_this.settings.column_dendrogram.draw){\r\n      _this.column_root_id = _this._get_root_id(_this.column_dendrogram.nodes);\r\n      _this.nodes2columns = false;\r\n      _this.columns_start_index = 0;\r\n      _this._draw_column_dendrogram(_this.column_root_id);\r\n    }\r\n\r\n    if(_this.settings.images.draw){\r\n      _this.path2image = {};\r\n      _this.path2image_obj = {};\r\n      _this.image_counter = 0;\r\n    }\r\n\r\n    _this._draw_heatmap();\r\n    _this._draw_heatmap_header();\r\n    _this._draw_navigation();\r\n    _this.highlight_rows(_this.settings.highlighted_rows);\r\n    console.timeEnd(\"DRAW\");\r\n    document.getElementById(\"spinner\").style.display=\"none\";\r\n    $('html, body').animate({ scrollTop: 0 }, 'fast');\r\n  }\r\n\r\n  InCHlib.prototype._draw_dendrogram_layers = function(){\r\n    var _this = this;\r\n    _this.cluster_layer = new Konva.Layer();\r\n    _this.dendrogram_hover_layer = new Konva.Layer();\r\n    _this.stage.add(_this.cluster_layer, _this.dendrogram_hover_layer);\r\n\r\n    _this.cluster_layer.on(\"click\", function(evt){\r\n        _this.unhighlight_cluster();\r\n        _this.unhighlight_column_cluster();\r\n        _this.events.empty_space_onclick(evt);\r\n    });\r\n  };\r\n\r\n  InCHlib.prototype._get_node_levels = function(nodes){\r\n    var _this = this;\r\n\r\n    for(var i = 0, keys=Object.keys(nodes), len=keys.length; i<len; i++){\r\n      var key = keys[i];\r\n      var level = 1\r\n      if(nodes[key].count == 1){\r\n        nodes[key].level = level;\r\n        level++;\r\n\r\n        var node = nodes[key];\r\n        while(\"parent\" in node){\r\n          var parent_id = node.parent;\r\n          if(nodes[parent_id].level == undefined || nodes[parent_id].level < level){\r\n            nodes[parent_id].level = level;\r\n          }\r\n          level++;\r\n          node = nodes[parent_id];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  InCHlib.prototype._draw_row_dendrogram = function(node_id){\r\n    var _this = this;\r\n    _this.dendrogram_layer = new Konva.Layer();\r\n    var node = _this.data.nodes[node_id];\r\n    var count = node.count;\r\n\r\n    _this.distance_step = _this.distance/node.distance;\r\n    _this.leaves_y_coordinates = {};\r\n    _this.objects2leaves = {};\r\n\r\n    _this._adjust_leaf_size(count);\r\n    _this.settings.height = count*_this.pixels_for_leaf+_this.header_height+_this.footer_height+_this.column_metadata_height;\r\n    \r\n    _this.stage.setWidth(_this.settings.width);\r\n    _this.stage.setHeight(_this.settings.height);\r\n\r\n    var current_left_count = 0;\r\n    var current_right_count = 0;\r\n    var y = _this.header_height + _this.column_metadata_height + _this.pixels_for_leaf/2;\r\n    \r\n    if(node.count > 1){\r\n        current_left_count = _this.data.nodes[node.left_child].count;\r\n        current_right_count = _this.data.nodes[node.right_child].count;\r\n    }\r\n    if(_this.settings.dendrogram.unified_distance){\r\n      _this._get_node_levels(_this.data.nodes);\r\n      _this.unified_distance_step = _this.data.nodes[node_id].distance/_this.data.nodes[node_id].level;\r\n    }\r\n\r\n    var node_options = {node_id: node_id, current_left_count: current_left_count, current_right_count: current_right_count, x: 0, y: y};\r\n    var nodes = [[node, node_options]];\r\n    \r\n    while(nodes.length > 0){\r\n      var to_draw = [];\r\n      for(var i = 0, len=nodes.length; i<len; i++){\r\n        to_draw = to_draw.concat(_this._draw_row_dendrogram_node(nodes[i][0], nodes[i][1]));\r\n      }\r\n      nodes = to_draw.map(function(x, i){return x});\r\n    }\r\n\r\n    _this.middle_item_count = (_this.min_item_count+_this.max_item_count)/2;\r\n    _this._draw_distance_scale(node.distance);\r\n    _this.stage.add(_this.dendrogram_layer);\r\n    _this.current_leaf_ids = Object.keys(_this.leaves_y_coordinates);\r\n\r\n    _this._bind_dendrogram_hover_events(_this.dendrogram_layer);\r\n    \r\n    _this.dendrogram_layer.on(\"click\", function(evt){\r\n        _this._dendrogram_layers_click(this, evt);\r\n    });\r\n    \r\n    _this.dendrogram_layer.on(\"mousedown\", function(evt){\r\n      _this._dendrogram_layers_mousedown(this, evt);\r\n    });\r\n\r\n    _this.dendrogram_layer.on(\"mouseup\", function(evt){\r\n      _this._dendrogram_layers_mouseup(this, evt);\r\n    });\r\n  }\r\n\r\n  InCHlib.prototype._draw_row_dendrogram_node = function(node, node_options){\r\n    var _this = this;\r\n    var to_draw = [];\r\n    \r\n    if(node.color !== undefined){\r\n      node_options.color = node.color;\r\n    }\r\n    else if(node_options.color !== undefined){\r\n      node.color = node_options.color;\r\n    }\r\n\r\n    if(node.count > 1){\r\n      var node_neighbourhood = _this._get_node_neighbourhood(node, _this.data.nodes);\r\n      var right_child = _this.data.nodes[node.right_child];\r\n      var left_child = _this.data.nodes[node.left_child];\r\n      var y1 = _this._get_y1(node_neighbourhood, node_options.current_left_count, node_options.current_right_count);\r\n      var y2 = _this._get_y2(node_neighbourhood, node_options.current_left_count, node_options.current_right_count);\r\n      var left_distance = _this.distance;\r\n      var right_distance = _this.distance;\r\n\r\n      if(_this.settings.dendrogram.unified_distance){\r\n        var x1 = _this._hack_round(_this.distance - node.level*_this.distance_step*_this.unified_distance_step);\r\n        \r\n        if(_this.data.nodes[node.left_child].count > 1){\r\n          left_distance = _this.distance - _this.data.nodes[node.left_child].level*_this.distance_step*_this.unified_distance_step;\r\n        }\r\n\r\n        if(_this.data.nodes[node.right_child].count > 1){\r\n          right_distance = _this.distance - _this.data.nodes[node.right_child].level*_this.distance_step*_this.unified_distance_step;\r\n        }\r\n      }\r\n      else{\r\n        var x1 = _this._hack_round(_this.distance - _this.distance_step*node.distance); \r\n        left_distance = _this.distance - _this.distance_step*_this.data.nodes[node.left_child].distance;\r\n        right_distance = _this.distance - _this.distance_step*_this.data.nodes[node.right_child].distance;\r\n\r\n      }\r\n      x1 = (x1 == 0)? 2: x1;          \r\n      var x2 = x1;\r\n\r\n      if(right_child.count == 1){\r\n          y2 = y2 + _this.pixels_for_leaf/2;\r\n      }\r\n\r\n      _this.dendrogram_layer.add(_this._draw_horizontal_path(node_options.node_id, x1, y1, x2, y2, left_distance, right_distance, node_options.color));\r\n      to_draw.push([left_child, {node_id: node.left_child, current_left_count: node_options.current_left_count - node_neighbourhood.left_node.right_count, current_right_count: node_options.current_right_count + node_neighbourhood.left_node.right_count, x: left_distance, y: y1, color: node_options.color}]);\r\n      to_draw.push([right_child, {node_id: node.right_child, current_left_count: node_options.current_left_count + node_neighbourhood.right_node.left_count, current_right_count: node_options.current_right_count - node_neighbourhood.right_node.left_count, x: right_distance, y: y2, color: node_options.color}]);\r\n    }\r\n    else{\r\n      var objects = node.objects;\r\n      _this.leaves_y_coordinates[node_options.node_id] = node_options.y;\r\n\r\n      for(var i = 0, len = objects.length; i<len; i++){\r\n          _this.objects2leaves[objects[i]] = node_options.node_id;\r\n      }\r\n\r\n      var count = node.objects.length;\r\n      if(count<_this.min_item_count){\r\n          _this.min_item_count = count;\r\n      }\r\n      if(count>_this.max_item_count){\r\n          _this.max_item_count = count;\r\n      }\r\n    }\r\n    return to_draw;\r\n  }\r\n\r\n  InCHlib.prototype._draw_stage_layer = function(){\r\n    var _this = this;\r\n      _this.stage_layer = new Konva.Layer();\r\n      var stage_rect = new Konva.Rect({\r\n                                  x: 0,\r\n                                  y: 0,\r\n                                  width: _this.settings.width,\r\n                                  height: _this.settings.height,\r\n                                  opacity: 0,\r\n                                  preventDefault: false\r\n                              });\r\n      _this.stage_layer.add(stage_rect);\r\n      stage_rect.moveToBottom();\r\n      _this.stage.add(_this.stage_layer);\r\n\r\n\r\n      _this.stage_layer.on(\"click\", function(evt){\r\n          _this.unhighlight_cluster();\r\n          _this.unhighlight_column_cluster();\r\n          _this.events.empty_space_onclick(evt);\r\n      });\r\n  }\r\n\r\n  InCHlib.prototype._draw_column_dendrogram = function(node_id){\r\n    var _this = this;\r\n      _this.column_dendrogram_layer = new Konva.Layer();\r\n      _this.column_x_coordinates = {};\r\n      var node = _this.column_dendrogram.nodes[node_id];\r\n      _this.current_column_count = node.count;\r\n      _this.vertical_distance = _this.header_height;\r\n      _this.vertical_distance_step = _this.vertical_distance/node.distance;\r\n\r\n      _this.last_highlighted_column_cluster = null;\r\n      var current_left_count = _this.column_dendrogram.nodes[node.left_child].count;\r\n      var current_right_count = _this.column_dendrogram.nodes[node.right_child].count;\r\n      _this._draw_column_dendrogram_node(node_id, node, current_left_count, current_right_count, 0, 0);\r\n      _this.stage.add(_this.column_dendrogram_layer);\r\n\r\n      if(!_this.nodes2columns){\r\n        _this.nodes2columns = _this._get_nodes2columns();\r\n      };\r\n      \r\n      _this._bind_dendrogram_hover_events(_this.column_dendrogram_layer);\r\n\r\n      _this.column_dendrogram_layer.on(\"click\", function(evt){\r\n          _this._column_dendrogram_layers_click(this, evt);\r\n      });\r\n\r\n      _this.column_dendrogram_layer.on(\"mousedown\", function(evt){\r\n        _this._column_dendrogram_layers_mousedown(this, evt);\r\n      });\r\n\r\n      _this.column_dendrogram_layer.on(\"mouseup\", function(evt){\r\n        _this._dendrogram_layers_mouseup(this, evt);\r\n      });\r\n  }\r\n\r\n  InCHlib.prototype._get_nodes2columns = function(){\r\n    var _this = this;\r\n    var coordinates = [];\r\n    var coordinates2nodes = {};\r\n    var nodes2columns = {};\r\n    var key, value, i;\r\n\r\n    for(i = 0, keys = Object.keys(_this.column_x_coordinates), len = keys.length; i < len; i++){\r\n      key = keys[i];\r\n      value = _this.column_x_coordinates[key];\r\n      coordinates2nodes[value] = key;\r\n      coordinates.push(value);\r\n    }\r\n    coordinates.sort(function(a,b){return a - b});\r\n\r\n    for(i = 0, len = coordinates.length; i<len; i++){\r\n      nodes2columns[coordinates2nodes[coordinates[i]]] = i;\r\n    }\r\n    return nodes2columns;\r\n  }\r\n\r\n  InCHlib.prototype._bind_dendrogram_hover_events = function(layer){\r\n    var _this = this;\r\n\r\n      layer.on(\"mouseover\", function(evt){\r\n          _this._dendrogram_layers_mouseover(this, evt);\r\n      });\r\n\r\n      layer.on(\"mouseout\", function(evt){\r\n          _this._dendrogram_layers_mouseout(this, evt);\r\n      });    \r\n  }\r\n\r\n  InCHlib.prototype._delete_layers = function(to_destroy, to_remove_children){\r\n    var _this = this;\r\n      for(var i = 0, len = to_destroy.length; i < len; i++){\r\n        if(to_destroy[i] !== undefined){\r\n          to_destroy[i].destroy();\r\n        }\r\n      }\r\n\r\n      if(to_remove_children !== undefined){\r\n        for(var i = 0, len = to_remove_children.length; i < len; i++){\r\n          to_remove_children[i].removeChildren();\r\n          to_remove_children[i].draw();\r\n        }\r\n      }\r\n  }\r\n\r\n  InCHlib.prototype._delete_all_layers = function(){\r\n    var _this = this;\r\n      _this.stage.destroyChildren();\r\n  }\r\n\r\n  InCHlib.prototype._adjust_leaf_size = function(leaves){\r\n    var _this = this;\r\n      _this.pixels_for_leaf = (_this.settings.max_height-_this.header_height-_this.footer_height-_this.column_metadata_height-5)/leaves;\r\n\r\n      if(_this.settings.row_ids.draw && _this.settings.row_ids.fixed_size){\r\n        _this.settings.heatmap.row_height.min = _this.settings.row_ids.fixed_size + 2;\r\n      }\r\n\r\n      if(_this.pixels_for_leaf > _this.settings.heatmap.row_height.max){\r\n          _this.pixels_for_leaf = _this.settings.heatmap.row_height.max;\r\n      }\r\n\r\n      if(_this.settings.heatmap.row_height.min > _this.pixels_for_leaf){\r\n          _this.pixels_for_leaf = _this.settings.heatmap.row_height.min;\r\n      }\r\n  }\r\n\r\n  InCHlib.prototype._adjust_horizontal_sizes = function(dimensions){\r\n      var _this = this;\r\n      if(_this.right_margin === undefined){\r\n        _this.right_margin = 100;\r\n      }\r\n      if(dimensions === undefined){\r\n        dimensions = _this._get_visible_count();\r\n      }\r\n      \r\n      if(_this.settings.dendrogram.draw){\r\n        if(_this.settings.heatmap.draw){\r\n          _this.heatmap_width = (_this.settings.width - _this.right_margin - _this.dendrogram_heatmap_distance)*_this.settings.heatmap.relative_width;\r\n        }\r\n        else{\r\n          _this.heatmap_width = 0;\r\n        }\r\n        \r\n        _this.pixels_for_dimension = (dimensions > 0 && _this.heatmap_width > 0)?_this.heatmap_width/dimensions:0;\r\n\r\n        if(_this.pixels_for_dimension === 0){\r\n          _this.heatmap_width = 0;\r\n        }\r\n\r\n        _this.distance = _this.settings.width - _this.heatmap_width - _this.right_margin;\r\n        _this.heatmap_distance = _this.distance + _this.dendrogram_heatmap_distance;\r\n      }\r\n      else{\r\n        _this.heatmap_width = _this.settings.width - _this.right_margin*2;\r\n        _this.distance = _this.right_margin;\r\n        _this.heatmap_distance = _this.distance;\r\n        _this.pixels_for_dimension = dimensions?_this.heatmap_width/dimensions:0;\r\n      }\r\n\r\n      if(_this.settings.heatmap.column_width.max && _this.settings.heatmap.column_width.max < _this.pixels_for_dimension){\r\n        _this.pixels_for_dimension = _this.settings.heatmap.column_width.max;\r\n        _this.heatmap_width = dimensions*_this.pixels_for_dimension;\r\n\r\n        if(_this.settings.dendrogram.draw){\r\n          _this.distance = _this.settings.width - _this.heatmap_width - _this.right_margin - _this.dendrogram_heatmap_distance;\r\n          _this.heatmap_distance = _this.distance + _this.dendrogram_heatmap_distance;\r\n        }\r\n        else{\r\n          _this.distance = _this._hack_round((_this.settings.width - _this.heatmap_width)/2);\r\n          _this.right_margin = _this.distance;\r\n          _this.heatmap_distance = _this.distance;\r\n        }\r\n      }\r\n  }\r\n\r\n  InCHlib.prototype._set_color_settings = function(){\r\n    var _this = this;\r\n    var data = [];\r\n    for(i = 0, len = _this.leaf_ids.length; i < len; i++){\r\n        data.push(_this.data.nodes[_this.leaf_ids[i]].features);\r\n    }\r\n    \r\n    _this.data_descs = {};\r\n    if(_this.settings.heatmap.colors.independent_columns){\r\n        _this.data_descs = _this._get_data_min_max_middle(data, \"column\", \"heatmap\");\r\n    }\r\n    else{\r\n        var min_max_middle = _this._get_min_max_middle(data);\r\n        for(i = 0; i < _this.dimensions[\"data\"]; i++){\r\n          _this.data_descs[i] = {\"min\": min_max_middle[0], \"max\": min_max_middle[1], \"middle\": min_max_middle[2]};\r\n        }\r\n    }\r\n\r\n    if(_this.settings.metadata.draw){\r\n        var metadata = [];\r\n\r\n        for(i = 0, len = _this.leaf_ids.length; i < len; i++){\r\n            metadata.push(_this.metadata.nodes[_this.leaf_ids[i]]);\r\n        }\r\n        _this.metadata_descs = _this._get_data_min_max_middle(metadata, \"column\", \"metadata\");\r\n    }\r\n  }\r\n\r\n  InCHlib.prototype._set_heatmap_settings = function(){\r\n    var _this = this;\r\n      var i, keys, key, len, node;\r\n\r\n      _this.header = [];\r\n      for(i = 0; i<_this.dimensions[\"overall\"]; i++){\r\n          _this.header.push(\"\");\r\n      }\r\n\r\n      if(_this.settings.heatmap.columns_order.length === 0 || _this.settings.heatmap.columns_order.length !== _this.dimensions[\"data\"]){\r\n         _this.settings.heatmap.columns_order = [];\r\n        for(i = 0; i < _this.dimensions[\"data\"]; i++){\r\n          _this.settings.heatmap.columns_order.push(i);\r\n        }\r\n      }\r\n\r\n      if(_this.settings.metadata.draw){\r\n        for(i = _this.dimensions[\"data\"]; i < _this.dimensions[\"data\"] + _this.dimensions[\"metadata\"]; i++){\r\n          _this.settings.heatmap.columns_order.push(i);\r\n        } \r\n      }\r\n\r\n      if(_this.settings.count_column.draw){\r\n          _this.settings.heatmap.columns_order.push(_this.settings.heatmap.columns_order.length);\r\n      }\r\n\r\n      _this.features = {};\r\n\r\n      for(i=0; i<_this.settings.heatmap.columns_order.length; i++){\r\n          _this.features[i] = true;\r\n      }\r\n\r\n      _this._set_on_features();\r\n\r\n      _this.heatmap_header = false;\r\n      _this.metadata_header = false;\r\n      _this.current_label = null;\r\n\r\n      _this._set_color_settings();\r\n\r\n      if(_this.settings.alternative_data && _this.json.alternative_data.feature_names !== undefined){\r\n        _this.heatmap_header = _this.json.alternative_data.feature_names;\r\n      }\r\n      else if(_this.data.feature_names !== undefined){\r\n        _this.heatmap_header = _this.data.feature_names;\r\n      }\r\n\r\n      if(_this.heatmap_header){\r\n        for(i=0; i<_this.dimensions[\"data\"]; i++){\r\n            _this.header[i] = _this.heatmap_header[_this.on_features[\"data\"][i]].trim(\" \");\r\n        }\r\n      }\r\n\r\n      if(_this.settings.metadata.draw){\r\n\r\n          if(_this.metadata.feature_names){\r\n              _this.metadata_header = _this.metadata.feature_names;\r\n\r\n              for(i=0; i<_this.dimensions[\"metadata\"]; i++){\r\n                  _this.header[_this.dimensions[\"data\"]+i] = _this.metadata_header[i].trim(\" \");\r\n              }\r\n          }\r\n      }\r\n\r\n      if(_this.settings.column_metadata.draw){\r\n        if(_this.column_metadata.feature_names !== undefined){\r\n          _this.column_metadata_header = _this.column_metadata.feature_names;\r\n        }\r\n      }\r\n\r\n      if(_this.settings.count_column.draw){\r\n          _this.max_item_count = 1;\r\n          _this.min_item_count = 1;\r\n          _this.dimensions[\"overall\"]++;\r\n          _this.header.push(\"Count\");\r\n      }\r\n\r\n      _this._adjust_horizontal_sizes();\r\n      _this.top_heatmap_distance = _this.header_height + _this.column_metadata_height + _this.settings.column_metadata.row_height/2;\r\n  }\r\n\r\n  InCHlib.prototype._set_on_features = function(features){\r\n    var _this = this;\r\n    var key;\r\n    if(features === undefined){\r\n      var features = [];\r\n      for(var i = 0, keys = Object.keys(_this.features), len = keys.length; i < len; i++){\r\n        key = keys[i];\r\n        if(_this.features[key]){\r\n          features.push(_this.settings.heatmap.columns_order[i]);\r\n        }\r\n      }\r\n    }\r\n\r\n    _this.on_features = {\"data\":[], \"metadata\":[], \"count_column\":[]}\r\n    \r\n    for(var i = 0, len = features.length; i < len; i++){\r\n      key = features[i];\r\n      if(key < _this.dimensions[\"data\"]){\r\n          _this.on_features[\"data\"].push(key);\r\n      }\r\n      else if(key <= _this.dimensions[\"data\"] + _this.dimensions[\"metadata\"] - 1){\r\n            _this.on_features[\"metadata\"].push(key-_this.dimensions[\"data\"]);\r\n      }\r\n      else{\r\n        _this.on_features[\"count_column\"].push(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  InCHlib.prototype._draw_heatmap = function(){\r\n    var _this = this;\r\n    console.time(\"HEATMAP\");\r\n    if(!_this.settings.heatmap.draw){\r\n        return;\r\n    }\r\n\r\n    var heatmap_row, row_id, col_number, col_label, row_values, y;\r\n    _this.heatmap_layer = new Konva.Layer();\r\n    _this.heatmap_overlay = new Konva.Layer();\r\n\r\n    _this.current_draw_values = true;\r\n    _this.max_value_length = _this._get_max_value_length();\r\n    _this.value_font_size = _this._get_font_size(_this.max_value_length, _this.pixels_for_dimension, _this.pixels_for_leaf, 12);\r\n\r\n    if(_this.value_font_size < 4){\r\n        _this.current_draw_values = false;\r\n    }\r\n\r\n    var x1 = _this.heatmap_distance;\r\n\r\n    for(var i = 0, len = _this.current_leaf_ids.length; i < len; i++){\r\n        key = _this.current_leaf_ids[i];\r\n        y = _this.leaves_y_coordinates[key];\r\n        heatmap_row = _this._draw_heatmap_row(key, x1, y);\r\n        _this.heatmap_layer.add(heatmap_row);\r\n        _this._bind_row_events(heatmap_row);\r\n    }\r\n\r\n    if(_this.settings.column_metadata.draw){\r\n        _this.column_metadata_descs = _this._get_data_min_max_middle(_this.column_metadata.features, \"row\");\r\n        y1 = _this.header_height + 0.5*_this.settings.column_metadata.row_height;\r\n\r\n        for(var i = 0, len = _this.column_metadata.features.length; i < len; i++){\r\n            heatmap_row = _this._draw_column_metadata_row(_this.column_metadata.features[i], i, x1, y1);\r\n            _this.heatmap_layer.add(heatmap_row);\r\n            _this._bind_row_events(heatmap_row);\r\n            y1 = y1 + _this.settings.column_metadata.row_height;\r\n        }\r\n    }\r\n    \r\n    if(_this.settings.row_ids.draw){\r\n        _this._draw_row_ids();\r\n    }\r\n\r\n    _this.highlighted_rows_layer = new Konva.Layer();\r\n    _this.stage.add(_this.heatmap_layer, _this.heatmap_overlay, _this.highlighted_rows_layer);\r\n\r\n    _this.highlighted_rows_layer.moveToTop();\r\n    _this.row_overlay = _this.objects_ref.heatmap_line.clone();\r\n    _this.column_overlay = _this.objects_ref.heatmap_line.clone();\r\n\r\n    _this.heatmap_layer.on(\"mouseout\", function(evt){\r\n        _this.last_header = null;\r\n        _this.heatmap_overlay.destroyChildren();\r\n        _this.heatmap_overlay.draw();\r\n        _this.events.heatmap_onmouseout(evt);\r\n    });\r\n    console.timeEnd(\"HEATMAP\");\r\n  }\r\n\r\n  InCHlib.prototype._draw_heatmap_row = function(node_id, x1, y1){\r\n    var _this = this;\r\n    var node = _this.data.nodes[node_id];\r\n    var row = new Konva.Group({id:node_id});\r\n    var x2, y2, color, line, value, text, text_value, col_index;\r\n    \r\n    for (var i = 0, len = _this.on_features[\"data\"].length; i < len; i++){\r\n        col_index = _this.on_features[\"data\"][i];\r\n        x2 = x1 + _this.pixels_for_dimension;\r\n        y2 = y1;\r\n        value = node.features[col_index];\r\n        text_value = value;\r\n\r\n        if(_this.settings.alternative_data){\r\n            text_value = _this.alternative_data[node_id][col_index];\r\n        }\r\n        \r\n        if(_this.settings.images.draw && ![undefined, null, \"\"].includes(text_value)){\r\n          value = null;\r\n          var filepath = _this.settings.images.path.dir + text_value + _this.settings.images.path.ext;\r\n          filepath = escape(filepath);\r\n\r\n\r\n          if(_this.path2image[text_value] === undefined){\r\n            var image_obj = new Image();\r\n            image_obj.src = filepath;\r\n            \r\n            image_obj.onload = function(){\r\n              _this.image_counter++;\r\n\r\n              if(_this.image_counter === Object.keys(_this.path2image).length){\r\n                _this.heatmap_layer.draw();\r\n              }\r\n\r\n            };\r\n\r\n            _this.path2image_obj[text_value] = image_obj;\r\n            _this.path2image[text_value] = _this.objects_ref.image.clone({image: _this.path2image_obj[text_value]});\r\n          }\r\n\r\n          var image = _this.path2image[text_value].clone({width: _this.pixels_for_dimension,\r\n                                                     height: _this.pixels_for_leaf,\r\n                                                     x:x1,\r\n                                                     y:y1 - _this._hack_round(0.5*_this.pixels_for_leaf),\r\n                                                     points:[x1, y1, x1 + _this.pixels_for_dimension, null],\r\n                                                     column: [\"d\", col_index].join(\"_\"),\r\n                                                     value: text_value\r\n                                                   });\r\n          row.add(image);\r\n        }\r\n               \r\n        else if(value !== null){\r\n          color = _this._get_color_for_value(value, _this.data_descs[col_index][\"min\"], _this.data_descs[col_index][\"max\"], _this.data_descs[col_index][\"middle\"], _this.settings.heatmap.colors.scale);\r\n          text_value = text_value.toString();\r\n          line = _this.objects_ref.heatmap_line.clone({\r\n              stroke: color,\r\n              points: [x1, y1, x2, y2],\r\n              value: text_value,\r\n              column: [\"d\", col_index].join(\"_\"),\r\n              strokeWidth: _this.pixels_for_leaf,\r\n          });\r\n          row.add(line);\r\n\r\n          if(_this.current_draw_values){\r\n            text = _this.objects_ref.heatmap_value.clone({\r\n                x: _this._hack_round((x1 + x2)/2-(text_value).length*(_this.value_font_size/4)),\r\n                y: _this._hack_round(y1-_this.value_font_size/2),\r\n                fontSize: _this.value_font_size,\r\n                text: text_value,\r\n            });\r\n            row.add(text);\r\n          }\r\n        }\r\n        \r\n\r\n        x1 = x2;\r\n    }\r\n\r\n    if(_this.settings.metadata.draw){\r\n        var metadata = _this.metadata.nodes[node_id];\r\n\r\n        if(metadata !== undefined){\r\n          var colors_predefined = Object.keys(_this.settings.metadata.colors.value2color).length > 0;\r\n\r\n          for (var i = 0, len = _this.on_features[\"metadata\"].length; i < len; i++){\r\n              col_index = _this.on_features[\"metadata\"][i];\r\n              value = metadata[col_index];\r\n              x2 = x1 + _this.pixels_for_dimension;\r\n              y2 = y1;\r\n\r\n              if(value !== null && value !== undefined){\r\n                text_value = value;\r\n                \r\n                if(_this.metadata_descs[col_index][\"str2num\"] !== undefined){\r\n                    value = _this.metadata_descs[col_index][\"str2num\"][value];\r\n                }\r\n                if(colors_predefined){\r\n                  color = _this.settings.metadata.colors.value2color[text_value];\r\n                  if(color === undefined){\r\n                    color = _this.settings.metadata.colors.default;\r\n                  }\r\n                }\r\n                else{\r\n                  color = _this._get_color_for_value(value, _this.metadata_descs[col_index][\"min\"], _this.metadata_descs[col_index][\"max\"], _this.metadata_descs[col_index][\"middle\"], _this.settings.metadata.colors.scale);    \r\n                }\r\n                line = _this.objects_ref.heatmap_line.clone({\r\n                        stroke: color,\r\n                        points: [x1, y1, x2, y2],\r\n                        value: text_value,\r\n                        column: [\"m\", col_index].join(\"_\"),\r\n                        strokeWidth: _this.pixels_for_leaf,\r\n                    });\r\n                row.add(line);\r\n\r\n                if(_this.current_draw_values){\r\n                    text = _this.objects_ref.heatmap_value.clone({\r\n                        text: text_value,\r\n                        fontSize: _this.value_font_size,\r\n                    });\r\n\r\n                    width = text.getWidth();\r\n                    x = _this._hack_round((x1+x2)/2-width/2);\r\n                    y = _this._hack_round(y1-_this.value_font_size/2);\r\n                    text.position({x:x, y:y});\r\n                    row.add(text);\r\n                }\r\n              }\r\n              x1 = x2;\r\n          }\r\n        }\r\n    }\r\n\r\n    if(_this.settings.count_column.draw && _this.features[_this.dimensions[\"overall\"]-1]){\r\n        x2 = x1 + _this.pixels_for_dimension;\r\n        var count = node.objects.length;\r\n        color = _this._get_color_for_value(count, _this.min_item_count, _this.max_item_count, _this.middle_item_count, _this.settings.count_column.colors);\r\n\r\n        line = _this.objects_ref.heatmap_line.clone({\r\n                stroke: color,\r\n                points: [x1, y1, x2, y2],\r\n                value: count,\r\n                column: \"Count\",\r\n                strokeWidth: _this.pixels_for_leaf,\r\n        });\r\n        row.add(line);\r\n\r\n        if(_this.current_draw_values){\r\n            text = _this.objects_ref.heatmap_value.clone({\r\n                text: count,\r\n            });\r\n\r\n            width = text.getWidth();\r\n            x = _this._hack_round((x1+x2)/2-width/2);\r\n            y = _this._hack_round(y1-_this.value_font_size/2);\r\n            text.position({x:x, y:y});\r\n            row.add(text);\r\n        }\r\n    }\r\n    return row;\r\n  }\r\n  \r\n  InCHlib.prototype._draw_column_metadata_row = function(data, row_index, x1, y1){\r\n      var _this = this;\r\n      var row = new Konva.Group({\"class\": \"column_metadata\"});\r\n      var x2, y2, color, line, value, text, text_value, width, col_index;\r\n      var str2num = (_this.column_metadata_descs[row_index][\"str2num\"] === undefined)?false:true;\r\n      var colors_predefined = Object.keys(_this.settings.column_metadata.colors.value2color).length > 0;\r\n\r\n      for (var i = 0, len = _this.on_features[\"data\"].length; i < len; i++){\r\n          col_index = _this.on_features[\"data\"][i];\r\n          value = data[col_index];\r\n          text_value = value;\r\n          \r\n          if(str2num){\r\n              value = _this.column_metadata_descs[row_index][\"str2num\"][value];\r\n          }\r\n          if(colors_predefined){\r\n            color = _this.settings.column_metadata.colors.value2color[text_value];\r\n            if(color === undefined){\r\n              color = _this.settings.column_metadata.colors.default;\r\n            }\r\n          }\r\n          else{\r\n            color = _this._get_color_for_value(value, _this.column_metadata_descs[row_index][\"min\"], _this.column_metadata_descs[row_index][\"max\"], _this.column_metadata_descs[row_index][\"middle\"], _this.settings.column_metadata.colors.scale);\r\n          }\r\n          x2 = x1 + _this.pixels_for_dimension;\r\n          y2 = y1;\r\n          \r\n          line = _this.objects_ref.heatmap_line.clone({\r\n                  strokeWidth: _this.settings.column_metadata.row_height,\r\n                  stroke: color,\r\n                  value: text_value,\r\n                  points: [x1, y1, x2, y2],\r\n                  column: [\"cm\", row_index].join(\"_\"),\r\n              });\r\n          row.add(line);\r\n          x1 = x2;\r\n\r\n      }\r\n      \r\n      if(_this.settings.column_metadata.feature_names.draw){\r\n        var text = _this.objects_ref.heatmap_value.clone({\r\n          x: x2 + 10,\r\n          y: _this._hack_round(y2 - _this.settings.column_metadata.row_height/2),\r\n          fontSize: _this.settings.column_metadata.row_height,\r\n          text: _this.column_metadata.feature_names[row_index].toString(),\r\n          fill: \"#000000\",\r\n          fontWeight: \"bold\"\r\n        });\r\n        _this.heatmap_layer.add(text);\r\n      }\r\n      return row;\r\n  }\r\n\r\n  InCHlib.prototype._bind_row_events = function(row){\r\n    var _this = this;\r\n      row.on(\"mouseenter\", function(evt){\r\n          _this._row_mouseenter(evt);\r\n      });\r\n\r\n      row.on(\"mouseleave\", function(evt){\r\n          _this._row_mouseleave(evt);\r\n      });\r\n\r\n      row.on(\"mouseover\", function(evt){\r\n          _this._draw_col_label(evt);\r\n      });\r\n\r\n      row.on(\"mouseout\", function(evt){\r\n          _this.heatmap_overlay.find(\"#col_label\")[0].destroy();\r\n      });\r\n      \r\n      row.on(\"click\", function(evt){\r\n          var row_id = evt.target.parent.attrs.id;\r\n          if(evt.target.parent.attrs.class !== \"column_metadata\"){\r\n              var items = _this.data.nodes[row_id].objects;\r\n              var item_ids = [];\r\n              \r\n              for(i = 0; i < items.length; i++){\r\n                  item_ids.push(items[i]);\r\n              }\r\n              \r\n              _this.events.row_onclick(item_ids, evt);\r\n              var cell = _this._get_cell_data(evt);\r\n              _this.events.cell_click(cell, evt);\r\n          }\r\n      });\r\n  }\r\n\r\n  InCHlib.prototype._draw_row_ids = function(){\r\n    var _this = this;\r\n    \r\n    if(_this.pixels_for_leaf < 6 || _this.row_id_size < 5){\r\n        return;\r\n    }\r\n    var i, objects, object_y = [], leaf, values = [], text;\r\n    \r\n    for(i = 0, len = _this.current_leaf_ids.length; i < len; i++){\r\n        leaf_id = _this.current_leaf_ids[i];\r\n        objects = _this.data.nodes[leaf_id].objects;\r\n        if(objects.length > 1){\r\n            return;\r\n        }\r\n        object_y.push([objects[0], _this.leaves_y_coordinates[leaf_id]]);\r\n    }\r\n\r\n    var x = _this.distance + _this._get_visible_count()*_this.pixels_for_dimension + 15;\r\n    for(i = 0; i < object_y.length; i++){\r\n        _this.target_element.append($(\"<div>\" + object_y[i][0].toString() + \"</div>\")\r\n          .css({\r\n            \"position\": \"absolute\", \"top\": _this._hack_round(object_y[i][1] - _this.row_id_size/2),\r\n            \"left\": x,\r\n            \"font-style\": \"italic\",\r\n            \"font-size\": _this.row_id_size,\r\n            \"color\": \"gray\"\r\n          }));\r\n        \r\n        // text = _this.objects_ref.heatmap_value.clone({\r\n        //     x: x,\r\n        //     y: _this._hack_round(object_y[i][1] - _this.row_id_size/2),\r\n        //     fontSize: _this.row_id_size,\r\n        //     text: object_y[i][0].toString(),\r\n        //     fontStyle: 'italic',\r\n        //     fill: \"gray\"\r\n        // });\r\n        // _this.heatmap_layer.add(text);\r\n    }\r\n      \r\n  }\r\n\r\n  InCHlib.prototype._get_row_id_size = function(){\r\n    var _this = this;\r\n    var objects, object_y = [], leaf_id, values = [], text;\r\n\r\n    for(var i = 0, len = _this.heatmap_array.length; i < len; i++){\r\n        leaf_id = _this.heatmap_array[i][0];\r\n        objects = _this.data.nodes[leaf_id].objects;\r\n        if(objects.length > 1){\r\n            /*_this.settings.row_ids.draw = false;\r\n            _this.right_margin = 100;\r\n            return;*/\r\n            values.push(objects[0] + \" +\" + (objects.length-1));\r\n        }\r\n        else{\r\n          values = values.concat(objects);\r\n        }\r\n    }\r\n    \r\n    var max_length = _this._get_max_length(values);\r\n    var test_string = \"\";\r\n    for(var i = 0; i < max_length; i++){\r\n      test_string += \"E\";\r\n    }\r\n\r\n    if(_this.settings.row_ids.fixed_size){\r\n      var test = new Konva.Text({\r\n                              fontFamily: _this.settings.heatmap.font.fontFamily,\r\n                              fontSize: _this.settings.row_ids.fixed_size,\r\n                              fontStyle: \"italic\",\r\n                              listening: false,\r\n                              text: test_string,\r\n                              preventDefault: false\r\n                          });\r\n      _this.row_id_size = _this.settings.row_ids.fixed_size;\r\n      _this.right_margin = 20 + test.width();\r\n      \r\n      // if(this.right_margin < 100){\r\n      //   _this.right_margin = 100;\r\n      // }\r\n    }\r\n    else{\r\n      _this.row_id_size = _this._get_font_size(max_length, 100, _this.pixels_for_leaf, 10);\r\n      _this.right_margin = 100;\r\n    }\r\n    \r\n  }\r\n\r\n  InCHlib.prototype._draw_heatmap_header = function(){\r\n    var _this = this;\r\n    if(_this.settings.heatmap_header.draw && _this.header.length > 0){\r\n      _this.header_layer = new Konva.Layer();\r\n      var count = _this.current_leaf_ids.length;\r\n      var distance_step = 0;\r\n      var x, i, column_header, key;\r\n      var current_headers = [];\r\n      var header_settings = _this.settings.heatmap_header.settings;\r\n      for(i = 0, len = _this.on_features[\"data\"].length; i < len; i++){\r\n        current_headers.push({\"label\": _this.header[_this.on_features[\"data\"][i]], \"min\": _this.data_descs[i].min, \"max\": _this.data_descs[i].max});\r\n      }\r\n\r\n      for(i = 0, len = _this.on_features[\"metadata\"].length; i < len; i++){\r\n        var index = _this.on_features[\"metadata\"][i] + _this.dimensions[\"data\"];\r\n        // current_headers.push({\"label\": _this.header[index], \"min\": _this.data_descs[index].min, \"max\": _this.data_descs[index].max});\r\n        current_headers.push({\"label\": _this.header[index]});\r\n      }\r\n      if(_this.settings.count_column.draw && _this.features[_this.dimensions[\"overall\"] - 1]){\r\n        current_headers.push({\"label\": _this.header[_this.dimensions[\"overall\"] - 1], \"min\": _this.data_descs[_this.dimensions[\"overall\"] - 1].min, \"max\": _this.data_descs[_this.dimensions[\"overall\"] - 1].max});\r\n      }\r\n\r\n      var max_text_length = _this._get_max_length(current_headers.map(x => x.label));\r\n      if(header_settings.fontSize === undefined){\r\n        var font_size = _this._get_font_size(max_text_length, _this.header_height, _this.pixels_for_dimension, 16);\r\n        if(font_size < 6){\r\n            return;\r\n        }\r\n        header_settings.fontSize = font_size;\r\n      }\r\n      \r\n      var y = _this.header_height - header_settings.fontSize/2;\r\n      var header_shift = _this.pixels_for_dimension/2-header_settings.fontSize/2;\r\n\r\n      if(_this.settings.column_dendrogram.draw && _this.heatmap_header){\r\n        y = _this.header_height+(_this.pixels_for_leaf*count) + 10 + _this.column_metadata_height;\r\n        header_shift = header_settings.fontSize/2 + _this.pixels_for_dimension/2;\r\n      };\r\n      \r\n      for(i = 0, len = current_headers.length; i<len; i++){\r\n        x = _this.heatmap_distance + distance_step*_this.pixels_for_dimension + header_shift;\r\n        header_settings.x = x;\r\n        header_settings.y = y;\r\n        /*header_settings.text = current_headers[i].label + \"\\n\" + current_headers[i].min + \" - \" + current_headers[i].max;*/\r\n        header_settings.text = current_headers[i].label;\r\n        header_settings.position_index = i;\r\n        column_header = _this.objects_ref.column_header.clone(header_settings);\r\n        _this.header_layer.add(column_header);\r\n        distance_step++;\r\n\r\n      }\r\n\r\n      _this.stage.add(_this.header_layer);\r\n\r\n      if(!(_this.settings.dendrogram.draw)){\r\n\r\n        _this.header_layer.on(\"click\", function(evt){\r\n            var column = evt.target;\r\n            var position_index = column.attrs.position_index;\r\n            for(i = 0; i<_this.header_layer.getChildren().length; i++){\r\n                _this.header_layer.getChildren()[i].setFill(\"black\");\r\n            }\r\n            evt.target.setAttrs({\"fill\": \"red\"});\r\n            _this._delete_layers([_this.heatmap_layer, _this.heatmap_overlay, _this.highlighted_rows_layer]);\r\n            _this._reorder_heatmap(_this._translate_column_to_feature_index(position_index));\r\n            _this._draw_heatmap();\r\n            _this.header_layer.draw();\r\n        });\r\n\r\n        _this.header_layer.on(\"mouseover\", function(evt){\r\n            var label = evt.target;\r\n            label.setOpacity(0.7);\r\n            this.draw();\r\n        });\r\n\r\n        _this.header_layer.on(\"mouseout\", function(evt){\r\n            var label = evt.target;\r\n            label.setOpacity(1);\r\n            this.draw();\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  InCHlib.prototype._translate_column_to_feature_index = function(column_index){\r\n    var _this = this;\r\n    var key;\r\n    var index = -1;\r\n    for(var i = 0, keys=Object.keys(_this.features), len=keys.length; i<len; i++){\r\n      key = keys[i];\r\n      if(_this.features[key]){\r\n        index++;\r\n        if(column_index === index){\r\n          return key;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  InCHlib.prototype._draw_distance_scale = function(distance){\r\n      var _this = this;\r\n      if(!_this.settings.navigation_toggle.distance_scale){\r\n        return;\r\n      }\r\n      var y1 = _this.header_height + _this.column_metadata_height + _this.settings.column_metadata.row_height/2 -10;\r\n      var y2 = y1;\r\n      var x1 = 0;\r\n      var x2 = _this.distance;\r\n      var path = new Konva.Line({\r\n          points: [x1, y1, x2, y2],\r\n          stroke: \"black\",\r\n          listening: false,\r\n          preventDefault: false\r\n      });\r\n\r\n      var circle = new Konva.Circle({\r\n          x: x2, \r\n          y: y2,\r\n          radius: 3,\r\n          fill: \"black\",\r\n          listening: false,\r\n          preventDefault: false\r\n      });\r\n\r\n      var number = 0;\r\n      var marker_tail = 3;\r\n      var marker_distance = x2;\r\n      var marker_number_distance = _this._hack_round(30/_this.distance_step*10)/10;\r\n      var distance = Math.round(100*_this.distance/_this.distance_step)/100;\r\n      var marker_distance_step = _this._hack_round(_this.distance_step*marker_number_distance);\r\n      var marker_counter = 0;\r\n\r\n      var distance_number = new Konva.Text({\r\n              x: 0,\r\n              y: y1-20,\r\n              text: distance,\r\n              fontSize: 12,\r\n              fontFamily: _this.settings.heatmap.font.fontFamily,\r\n              fontStyle: 'bold',\r\n              fill: 'black',\r\n              align: 'right',\r\n              listening: false,\r\n              preventDefault: false\r\n      });\r\n      _this.dendrogram_layer.add(path, circle, distance_number);\r\n\r\n      if(marker_distance_step==0){\r\n          marker_distance_step=0.5;\r\n      }\r\n\r\n      var path;\r\n      if(marker_number_distance > 0.1){\r\n          while(marker_distance > 0){\r\n              path = new Konva.Line({\r\n                  points: [marker_distance, (y1-marker_tail), marker_distance, (y2+marker_tail)],\r\n                  stroke: \"black\",\r\n                  listening: false,\r\n                  preventDefault: false\r\n              })\r\n              _this.dendrogram_layer.add(path);\r\n\r\n              number = _this._hack_round((number + marker_number_distance)*10)/10;\r\n              if(number>10){\r\n                  number = _this._hack_round(number);\r\n              }\r\n              \r\n              marker_distance = marker_distance - marker_distance_step;\r\n              marker_counter++;\r\n          }\r\n      }\r\n  }\r\n\r\n  InCHlib.prototype._draw_navigation = function(){\r\n    var _this = this;\r\n      _this.navigation_layer = new Konva.Layer();\r\n      var x = 0;\r\n      var y = 10;\r\n\r\n      if(_this.settings.heatmap.draw){\r\n        _this._draw_color_scale();\r\n      }\r\n      _this._draw_help();\r\n  \r\n      if(!_this.settings.column_dendrogram.draw && _this.settings.heatmap.draw && _this.settings.navigation_toggle.filter_button){\r\n          var filter_icon = _this.objects_ref.icon.clone({\r\n                  data: \"M26.834,6.958c0-2.094-4.852-3.791-10.834-3.791c-5.983,0-10.833,1.697-10.833,3.791c0,0.429,0.213,0.84,0.588,1.224l8.662,15.002v4.899c0,0.414,0.709,0.75,1.583,0.75c0.875,0,1.584-0.336,1.584-0.75v-4.816l8.715-15.093h-0.045C26.625,7.792,26.834,7.384,26.834,6.958zM16,9.75c-6.363,0-9.833-1.845-9.833-2.792S9.637,4.167,16,4.167c6.363,0,9.834,1.844,9.834,2.791S22.363,9.75,16,9.75z\",\r\n                  x: x,\r\n                  y: y,\r\n                  label: \"Filter\\ncolumns\"\r\n          });\r\n      \r\n          var filter_overlay = _this._draw_icon_overlay(x, y);\r\n          _this.navigation_layer.add(filter_icon, filter_overlay);\r\n          x = x + 40;    \r\n      \r\n          filter_overlay.on(\"click\", function(){\r\n              _this._filter_icon_click(this);\r\n          });\r\n              \r\n          filter_overlay.on(\"mouseover\", function(){\r\n              _this._icon_mouseover(filter_icon, filter_overlay, _this.navigation_layer);\r\n          });\r\n             \r\n          filter_overlay.on(\"mouseout\", function(){\r\n              _this._icon_mouseout(filter_icon, filter_overlay, _this.navigation_layer);\r\n          });\r\n      }\r\n\r\n      if(_this.zoomed_clusters[\"row\"].length > 0 || _this.zoomed_clusters[\"column\"].length > 0){\r\n        var refresh_icon = _this.objects_ref.icon.clone({\r\n              data: \"M24.083,15.5c-0.009,4.739-3.844,8.574-8.583,8.583c-4.741-0.009-8.577-3.844-8.585-8.583c0.008-4.741,3.844-8.577,8.585-8.585c1.913,0,3.665,0.629,5.09,1.686l-1.782,1.783l8.429,2.256l-2.26-8.427l-1.89,1.89c-2.072-1.677-4.717-2.688-7.587-2.688C8.826,3.418,3.418,8.826,3.416,15.5C3.418,22.175,8.826,27.583,15.5,27.583S27.583,22.175,27.583,15.5H24.083z\",\r\n              x: x,\r\n              y: y,\r\n              id: \"refresh_icon\",\r\n              label: \"Refresh\"\r\n        });\r\n        var refresh_overlay = _this._draw_icon_overlay(x, y);\r\n        _this.navigation_layer.add(refresh_icon, refresh_overlay);\r\n\r\n        refresh_overlay.on(\"click\", function(){\r\n            _this._refresh_icon_click();\r\n            _this.events.on_refresh();\r\n        });\r\n\r\n        refresh_overlay.on(\"mouseover\", function(){\r\n            _this._icon_mouseover(refresh_icon, refresh_overlay, _this.navigation_layer);\r\n        });\r\n\r\n        refresh_overlay.on(\"mouseout\", function(){\r\n            _this._icon_mouseout(refresh_icon, refresh_overlay, _this.navigation_layer);\r\n        });\r\n      }\r\n\r\n      if(_this.zoomed_clusters[\"row\"].length > 0){\r\n        x = _this.distance - 55;\r\n        y = _this.header_height + _this.column_metadata_height - 40;\r\n        var unzoom_icon = _this.objects_ref.icon.clone({\r\n            data: _this.paths_ref[\"unzoom_icon\"],\r\n            x: x,\r\n            y: y,\r\n            scale: {x: 0.7, y: 0.7},\r\n            label: \"Unzoom\\nrows\"\r\n        });\r\n        var unzoom_overlay = _this._draw_icon_overlay(x, y);\r\n        _this.navigation_layer.add(unzoom_icon, unzoom_overlay);\r\n\r\n        unzoom_overlay.on(\"click\", function(){\r\n            _this._unzoom_icon_click();\r\n        });\r\n\r\n        unzoom_overlay.on(\"mouseover\", function(){\r\n            _this._icon_mouseover(unzoom_icon, unzoom_overlay, _this.navigation_layer);\r\n        });\r\n\r\n        unzoom_overlay.on(\"mouseout\", function(){\r\n            _this._icon_mouseout(unzoom_icon, unzoom_overlay, _this.navigation_layer);\r\n        });\r\n      }\r\n\r\n      if(_this.zoomed_clusters[\"column\"].length > 0){\r\n          x = _this.settings.width - _this.right_margin + 10;\r\n          y = _this.header_height - 50;\r\n          var column_unzoom_icon = _this.objects_ref.icon.clone({\r\n              data: _this.paths_ref[\"unzoom_icon\"],\r\n              x: x,\r\n              y: y-5,\r\n              scale: {x: 0.7, y: 0.7},\r\n              label: \"Unzoom\\ncolumns\"\r\n          });\r\n          var column_unzoom_overlay = _this._draw_icon_overlay(x, y);\r\n\r\n          _this.navigation_layer.add(column_unzoom_icon, column_unzoom_overlay);\r\n\r\n          column_unzoom_overlay.on(\"click\", function(){\r\n              _this._column_unzoom_icon_click(this);\r\n          });\r\n\r\n          column_unzoom_overlay.on(\"mouseover\", function(){\r\n              _this._icon_mouseover(column_unzoom_icon, column_unzoom_overlay, _this.navigation_layer);\r\n          });\r\n\r\n          column_unzoom_overlay.on(\"mouseout\", function(){\r\n              _this._icon_mouseout(column_unzoom_icon, column_unzoom_overlay, _this.navigation_layer);\r\n          });\r\n      }\r\n\r\n      if(_this.settings.navigation_toggle.export_button){\r\n        var export_icon = _this.objects_ref.icon.clone({\r\n              data: \"M24.25,10.25H20.5v-1.5h-9.375v1.5h-3.75c-1.104,0-2,0.896-2,2v10.375c0,1.104,0.896,2,2,2H24.25c1.104,0,2-0.896,2-2V12.25C26.25,11.146,25.354,10.25,24.25,10.25zM15.812,23.499c-3.342,0-6.06-2.719-6.06-6.061c0-3.342,2.718-6.062,6.06-6.062s6.062,2.72,6.062,6.062C21.874,20.78,19.153,23.499,15.812,23.499zM15.812,13.375c-2.244,0-4.062,1.819-4.062,4.062c0,2.244,1.819,4.062,4.062,4.062c2.244,0,4.062-1.818,4.062-4.062C19.875,15.194,18.057,13.375,15.812,13.375z\",\r\n              x: _this.settings.width - 30,\r\n              y: 10,\r\n              scale: {x: 0.7, y: 0.7},\r\n              id: \"export_icon\",\r\n              label: \"Export\\nin png format\"\r\n        });\r\n\r\n        var export_overlay = _this._draw_icon_overlay(_this.settings.width - 30, 10);\r\n        _this.navigation_layer.add(export_icon, export_overlay);\r\n\r\n        export_overlay.on(\"click\", function(){\r\n            _this._export_icon_click(this);\r\n        });\r\n            \r\n        export_overlay.on(\"mouseover\", function(){\r\n            _this._icon_mouseover(export_icon, export_overlay, _this.navigation_layer);\r\n        });\r\n           \r\n        export_overlay.on(\"mouseout\", function(){\r\n            _this._icon_mouseout(export_icon, export_overlay, _this.navigation_layer);\r\n        });\r\n      }\r\n\r\n      _this.stage.add(_this.navigation_layer);\r\n  };\r\n\r\n  InCHlib.prototype._draw_help = function(){\r\n    var _this = this;\r\n    if(!_this.settings.navigation_toggle.hint_button){\r\n      return;\r\n    }\r\n    var help_icon = _this.objects_ref.icon.clone({\r\n          data: _this.paths_ref[\"lightbulb\"],\r\n          x: _this.settings.width - 30,\r\n          y: 40,\r\n          scale: {x: 0.8, y: 0.8},\r\n          id: \"help_icon\",\r\n          label: \"Tip\"\r\n    });\r\n\r\n    var help_overlay = _this._draw_icon_overlay(_this.settings.width - 30, 40);\r\n\r\n    _this.navigation_layer.add(help_icon, help_overlay);\r\n\r\n    help_overlay.on(\"mouseover\", function(){\r\n        _this._icon_mouseover(help_icon, help_overlay, _this.navigation_layer);\r\n        _this._help_mouseover();\r\n    });\r\n       \r\n    help_overlay.on(\"mouseout\", function(){\r\n        _this._help_mouseout();\r\n        _this._icon_mouseout(help_icon, help_overlay, _this.navigation_layer);\r\n    });\r\n\r\n  }\r\n\r\n  InCHlib.prototype._draw_color_scale = function(){\r\n      var _this = this;\r\n      if(!_this.settings.navigation_toggle.color_scale){\r\n        return;\r\n      }\r\n      var color_steps = [_this.settings.heatmap.colors.params.min/100*0.8, _this._get_color_for_value(0, 0, 1, 0.5, _this.settings.heatmap.colors.scale), _this.settings.heatmap.colors.params.middle/100*0.8, _this._get_color_for_value(0.5, 0, 1, 0.5, _this.settings.heatmap.colors.scale), _this.settings.heatmap.colors.params.max/100*0.8, _this._get_color_for_value(1, 0, 1, 0.5, _this.settings.heatmap.colors.scale)];\r\n      var color_scale = _this.objects_ref.rect_gradient.clone({\"label\": \"Color settings\",\r\n                                                              \"fillLinearGradientColorStops\": color_steps,\r\n                                                              \"id\": _this.settings.target + \"_color_scale\"});\r\n\r\n      color_scale.on(\"mouseover\", function(){\r\n        _this._color_scale_mouseover(color_scale, _this.navigation_layer);\r\n      });\r\n\r\n      color_scale.on(\"mouseout\", function(){\r\n        _this._color_scale_mouseout(color_scale, _this.navigation_layer);\r\n      });\r\n\r\n      color_scale.on(\"click\", function(){\r\n        _this._color_scale_click(color_scale, _this.navigation_layer);\r\n      });\r\n\r\n      _this.navigation_layer.add(color_scale);\r\n  }\r\n\r\n  InCHlib.prototype._update_color_scale = function(){\r\n    var _this = this;\r\n    var color_scale = _this.navigation_layer.find(\"#\" + _this.settings.target + \"_color_scale\");\r\n\r\n    color_scale.fillLinearGradientColorStops([_this.settings.heatmap.colors.params.min/100*0.8, _this._get_color_for_value(0, 0, 1, 0.5, _this.settings.heatmap.colors.scale), _this.settings.heatmap.colors.params.middle/100*0.8, _this._get_color_for_value(0.5, 0, 1, 0.5, _this.settings.heatmap.colors.scale), _this.settings.heatmap.colors.params.max/100*0.8, _this._get_color_for_value(1, 0, 1, 0.5, _this.settings.heatmap.colors.scale)]);\r\n    _this.navigation_layer.draw();\r\n  }\r\n\r\n  InCHlib.prototype._draw_icon_overlay = function(x, y){\r\n    var _this = this;\r\n      return _this.objects_ref.icon_overlay.clone({x: x, y: y});\r\n  }\r\n\r\n  InCHlib.prototype._highlight_path = function(path_id, color){\r\n    var _this = this;\r\n    var node = _this.data.nodes[path_id];\r\n\r\n    if(color === undefined && node.color !== undefined){\r\n      color = node.color;\r\n    }\r\n    else if(color === undefined && node.color === undefined){\r\n      color = \"gray\";\r\n    }\r\n    else if(color !== undefined && node.color !== undefined && color !== node.color){\r\n      color = node.color;\r\n    }\r\n\r\n    if(node.count != 1){\r\n        _this.dendrogram_layer.get(\"#\"+path_id)[0].stroke(color);\r\n        _this._highlight_path(node.left_child, color);\r\n        _this._highlight_path(node.right_child, color);\r\n    }\r\n    else{\r\n        _this.highlighted_rows_y.push(_this.leaves_y_coordinates[path_id]);\r\n        _this.current_object_ids.push.apply(_this.current_object_ids, node[\"objects\"])\r\n     }\r\n   }\r\n\r\n   InCHlib.prototype._highlight_column_path = function(path_id, color){\r\n    var _this = this;\r\n      var node = _this.column_dendrogram.nodes[path_id];\r\n      if(node.count != 1){\r\n          _this.column_dendrogram_layer.get(\"#col\"+path_id)[0].stroke(color);\r\n          _this._highlight_column_path(node.left_child, color);\r\n          _this._highlight_column_path(node.right_child, color);\r\n      }\r\n      else{\r\n        _this.current_column_ids.push(_this.nodes2columns[path_id]);\r\n      }\r\n   }\r\n\r\n  /**\r\n    * Unhighlight highlighted heatmap rows. \r\n    *\r\n    * @example \r\n    * instance.unhighlight_rows();\r\n    */\r\n   InCHlib.prototype.unhighlight_rows = function(){\r\n    var _this = this;\r\n      _this.highlight_rows([]);\r\n   }\r\n\r\n  /**\r\n    * Highlight heatmap rows with color defined in instance.settings.highlight_colors. \r\n    * When the empty array is passed it unhighlights all highlighted rows.\r\n    * \r\n    * @param {object} [row_ids] The array of heatmap row (object) IDs.\r\n    *\r\n    * @example \r\n    * instance.highlight_rows([\"CHEMBL7781\", \"CHEMBL273658\", \"CHEMBL415309\", \"CHEMBL267231\", \"CHEMBL8007\", \"CHEMBL7987\", \"CHEMBL7988\", \"CHEMBL266282\", \"CHEMBL7655\", \"CHEMBL7817\", \"CHEMBL8637\", \"CHEMBL8639\", \"CHEMBL8055\", \"CHEMBL7843\", \"CHEMBL266488\", \"CHEMBL8329\"]);\r\n    */\r\n\r\n   InCHlib.prototype.highlight_rows = function(row_ids){\r\n    var _this = this;\r\n      var i, row, row_id;\r\n      if(!_this.settings.heatmap.draw){\r\n        return;\r\n      }\r\n\r\n      _this.settings.highlighted_rows = row_ids;\r\n\r\n      _this.highlighted_rows_layer.destroyChildren();\r\n\r\n      var original_colors = _this.settings.heatmap.colors.scale;\r\n      var original_metadata_colors = _this.settings.metadata.colors.scale;\r\n      _this.settings.heatmap.colors.scale = _this.settings.highlight_colors;\r\n      _this.settings.metadata.colors.scale = _this.settings.highlight_colors;\r\n\r\n      var done_rows = {};\r\n      var unique_row_ids = [];\r\n\r\n      for(i = 0; i<row_ids.length; i++){\r\n          if(_this.objects2leaves[row_ids[i]] !== undefined){\r\n              row_id = _this.objects2leaves[row_ids[i]];\r\n              if(done_rows[row_id] === undefined){\r\n                  unique_row_ids.push(row_id);\r\n                  done_rows[row_id] = null;\r\n              }\r\n          }\r\n      }\r\n\r\n      for(i = 0; i<unique_row_ids.length; i++){\r\n          row = _this._draw_heatmap_row(unique_row_ids[i], _this.heatmap_distance, _this.leaves_y_coordinates[unique_row_ids[i]]);\r\n          _this.highlighted_rows_layer.add(row);\r\n          row.setAttr(\"listening\", false);\r\n      }\r\n\r\n\r\n      _this.highlighted_rows_layer.draw();\r\n      _this.heatmap_overlay.moveToTop();\r\n\r\n      _this.settings.heatmap.colors.scale = original_colors;\r\n      _this.settings.metadata.colors.scale = original_metadata_colors;\r\n\r\n\r\n      _this.highlighted_rows_layer.on(\"click\", function(evt){\r\n          _this.heatmap_layer.fire(\"click\");\r\n      });\r\n      \r\n  }\r\n\r\n  InCHlib.prototype._highlight_cluster = function(path_id){\r\n    var _this = this;\r\n    var previous_cluster = _this.last_highlighted_cluster;\r\n    \r\n    if(previous_cluster){\r\n      _this.unhighlight_cluster();\r\n    }\r\n\r\n    if(previous_cluster !== path_id){\r\n      _this.last_highlighted_cluster = path_id;\r\n      _this._highlight_path(path_id, \"#F5273C\");\r\n      _this._draw_cluster_layer(path_id);\r\n      _this.events.dendrogram_node_highlight(_this.current_object_ids, _this._unprefix(path_id));\r\n    }\r\n    _this.dendrogram_layer.draw();\r\n  }\r\n\r\n  InCHlib.prototype._highlight_column_cluster = function(path_id){\r\n    var _this = this;\r\n      var previous_cluster = _this.last_highlighted_column_cluster;\r\n      if(previous_cluster){\r\n        _this.unhighlight_column_cluster()\r\n      }\r\n      if(previous_cluster !== path_id){\r\n        _this.last_highlighted_column_cluster = path_id;\r\n        _this._highlight_column_path(path_id, \"#F5273C\");\r\n        _this.current_column_ids.sort(function(a,b){return a - b});\r\n        _this._draw_column_cluster_layer(path_id);\r\n        _this.events.column_dendrogram_node_highlight(_this.current_column_ids, _this._unprefix(path_id));\r\n      }\r\n      _this.column_dendrogram_layer.draw();\r\n  }\r\n\r\n  InCHlib.prototype.unhighlight_column_cluster = function(){\r\n    var _this = this;\r\n      if(_this.last_highlighted_column_cluster){\r\n        _this._highlight_column_path(_this.last_highlighted_column_cluster, \"grey\");\r\n        _this.column_dendrogram_layer.draw();\r\n        _this.column_cluster_group.destroy();\r\n        _this.cluster_layer.draw();\r\n        _this.current_column_ids = [];\r\n        _this.events.column_dendrogram_node_unhighlight(_this._unprefix(_this.last_highlighted_column_cluster));\r\n        _this.last_highlighted_column_cluster = null;\r\n      }\r\n  }\r\n\r\n  /**\r\n    * Highlight cluster defined by the dendrogram node ID.\r\n    * \r\n    * @param {string} node_id The ID of particular node in dendrogram.\r\n    *\r\n    * @example \r\n    * instance.highlight_cluster(\"node@715\");\r\n    */\r\n\r\n  InCHlib.prototype.highlight_cluster = function(node_id){\r\n    var _this = this;\r\n      return _this._highlight_cluster(_this._prefix(node_id));\r\n  }\r\n\r\n  /**\r\n    * Highlight column cluster defined by the dendrogram node ID.\r\n    * \r\n    * @param {string} node_id The ID of particular node in dendrogram.\r\n    *\r\n    * @example \r\n    * instance.highlight_column_cluster(\"node@715\");\r\n    */\r\n\r\n  InCHlib.prototype.highlight_column_cluster = function(node_id){\r\n    var _this = this;\r\n      return _this._highlight_column_cluster(_this._prefix(node_id));\r\n  }\r\n\r\n  /**\r\n    * Unhighlight highlighted dendrogram node (cluster).\r\n    *\r\n    * @example \r\n    * instance.unhighlight_cluster();\r\n    */\r\n  InCHlib.prototype.unhighlight_cluster = function(){\r\n    var _this = this;\r\n    if(_this.last_highlighted_cluster){\r\n      _this._highlight_path(_this.last_highlighted_cluster);\r\n      _this.dendrogram_layer.draw();\r\n      _this.row_cluster_group.destroy();\r\n      _this.cluster_layer.draw();\r\n      _this.events.dendrogram_node_unhighlight(_this._unprefix(_this.last_highlighted_cluster));\r\n      _this.highlighted_rows_y = [];\r\n      _this.current_object_ids = [];\r\n      _this.last_highlighted_cluster = null;\r\n    }\r\n  }\r\n\r\n  InCHlib.prototype._neutralize_path = function(path_id){\r\n    var _this = this;\r\n      var node = _this.data.nodes[path_id];\r\n\r\n      if(node.count != 1){\r\n          var path = _this.dendrogram_layer.get(\"#\"+path_id)[0];\r\n          if(path){\r\n              path.setStroke(\"grey\");\r\n              _this._neutralize_path(node.right_child);\r\n              _this._neutralize_path(node.left_child);\r\n          }\r\n      }\r\n  }\r\n\r\n  InCHlib.prototype._draw_cluster_layer = function(path_id){\r\n    var _this = this;\r\n      _this.row_cluster_group = new Konva.Group();\r\n      var visible = _this._get_visible_count();\r\n      var count = _this.data.nodes[path_id].count;\r\n      var x = _this.distance - 30;\r\n      var y = _this.header_height + _this.column_metadata_height - 40;\r\n\r\n      var rows_desc = _this.objects_ref.count.clone({x: x + 10,\r\n                                                    y: y - 10,\r\n                                                    text: count,\r\n                                                    });\r\n\r\n      var zoom_icon = _this.objects_ref.icon.clone({\r\n                      data: _this.paths_ref[\"zoom_icon\"],\r\n                      x: x,\r\n                      y: y,\r\n                      scale: {x: 0.7, y: 0.7},\r\n                      label: \"Zoom\\nrows\",\r\n                  });\r\n\r\n\r\n      var zoom_overlay = _this._draw_icon_overlay(x, y);\r\n\r\n      x = _this.distance + _this.dendrogram_heatmap_distance;\r\n      var width = visible*_this.pixels_for_dimension+_this.heatmap_distance;\r\n      var upper_y = _this.highlighted_rows_y[0]-_this.pixels_for_leaf/2;\r\n      var lower_y = _this.highlighted_rows_y[_this.highlighted_rows_y.length-1]+_this.pixels_for_leaf/2;\r\n      \r\n      var cluster_overlay_1 = _this.objects_ref.cluster_overlay.clone({\r\n          x: x,\r\n          y: _this.header_height + _this.column_metadata_height + 5,\r\n          width: width,\r\n          height: _this._hack_round(upper_y -_this.header_height - _this.column_metadata_height - 5),\r\n      });\r\n\r\n      var cluster_border_1 = _this.objects_ref.cluster_border.clone({\r\n          points: [0, upper_y, width, upper_y],\r\n      });\r\n\r\n      var cluster_overlay_2 = _this.objects_ref.cluster_overlay.clone({\r\n          x: x,\r\n          y: lower_y,\r\n          width: width,\r\n          height: _this.settings.height-lower_y-_this.footer_height + 5,\r\n      });\r\n\r\n      var cluster_border_2 = _this.objects_ref.cluster_border.clone({\r\n          points: [0, lower_y, width, lower_y],\r\n      });\r\n\r\n      _this.row_cluster_group.add(rows_desc, cluster_overlay_1, cluster_overlay_2, zoom_icon, zoom_overlay, cluster_border_1, cluster_border_2);\r\n      _this.cluster_layer.add(_this.row_cluster_group);\r\n      _this.stage.add(_this.cluster_layer);\r\n      rows_desc.moveToTop();\r\n\r\n      _this.cluster_layer.draw();\r\n      _this.cluster_layer.moveToTop();\r\n      _this.navigation_layer.moveToTop();\r\n\r\n      zoom_overlay.on(\"mouseover\", function(){\r\n          _this._icon_mouseover(zoom_icon, zoom_overlay, _this.cluster_layer);\r\n      });\r\n\r\n      zoom_overlay.on(\"mouseout\", function(){\r\n          _this._icon_mouseout(zoom_icon, zoom_overlay, _this.cluster_layer);\r\n      });\r\n\r\n      zoom_overlay.on(\"click\", function(){\r\n        _this._zoom_cluster(_this.last_highlighted_cluster);\r\n      });\r\n  }\r\n\r\n  InCHlib.prototype._draw_column_cluster_layer = function(path_id){\r\n    var _this = this;\r\n      _this.column_cluster_group = new Konva.Group();\r\n      var count = _this.column_dendrogram.nodes[path_id].count;      \r\n      var x = _this.settings.width - _this.right_margin + 10;\r\n      var y = _this.header_height - 25;\r\n\r\n      var cols_desc = _this.objects_ref.count.clone({x: x + 15,\r\n                                                        y: y - 5,\r\n                                                        text: count,\r\n                                                    });\r\n\r\n      var zoom_icon = _this.objects_ref.icon.clone({\r\n                      data: _this.paths_ref[\"zoom_icon\"],\r\n                      x: x,\r\n                      y: y,\r\n                      scale: {x: 0.7, y: 0.7},\r\n                      label: \"Zoom\\ncolumns\",\r\n                  });\r\n\r\n      var zoom_overlay = _this._draw_icon_overlay(x, y);\r\n\r\n      var x1 = _this._hack_round((_this.current_column_ids[0] - _this.columns_start_index)*_this.pixels_for_dimension);\r\n      var x2 = _this._hack_round((_this.current_column_ids[0] + _this.current_column_ids.length - _this.columns_start_index)*_this.pixels_for_dimension);\r\n      var y1 = 0;\r\n      var height = _this.settings.height-_this.footer_height-_this.header_height+_this.settings.column_metadata.row_height+_this.column_metadata_height;    \r\n      var y2 = height+_this.header_height;\r\n      \r\n      var cluster_border_1 = _this.objects_ref.cluster_border.clone({\r\n          points: [_this.heatmap_distance + x1, y1, _this.heatmap_distance + x1, y2],\r\n      });\r\n\r\n      var cluster_overlay_1 = _this.objects_ref.cluster_overlay.clone({\r\n          x: _this.heatmap_distance,\r\n          y: _this.header_height,\r\n          width: x1,\r\n          height: height,\r\n      });\r\n\r\n      var cluster_border_2 = _this.objects_ref.cluster_border.clone({\r\n          points: [_this.heatmap_distance + x2, y1, _this.heatmap_distance + x2, y2],\r\n      });\r\n\r\n      var cluster_overlay_2 = _this.objects_ref.cluster_overlay.clone({\r\n          x: x2+_this.heatmap_distance,\r\n          y: _this.header_height,\r\n          width: _this.heatmap_width - x2 - (_this.on_features[\"metadata\"].length + _this.on_features[\"count_column\"].length)*_this.pixels_for_dimension,\r\n          height: height,\r\n      });\r\n    \r\n\r\n      _this.column_cluster_group.add(cluster_overlay_1, cluster_overlay_2, zoom_icon, zoom_overlay, cols_desc, cluster_border_1, cluster_border_2);\r\n      _this.cluster_layer.add(_this.column_cluster_group);\r\n      _this.stage.add(_this.cluster_layer);\r\n      _this.cluster_layer.draw();\r\n      _this.cluster_layer.moveToTop();\r\n      _this.navigation_layer.moveToTop();\r\n\r\n      zoom_overlay.on(\"mouseover\", function(){\r\n          _this._icon_mouseover(zoom_icon, zoom_overlay, _this.cluster_layer);\r\n      });\r\n\r\n      zoom_overlay.on(\"mouseout\", function(){\r\n          _this._icon_mouseout(zoom_icon, zoom_overlay, _this.cluster_layer);\r\n      });\r\n\r\n      zoom_overlay.on(\"click\", function(){\r\n          _this._zoom_column_cluster(_this.last_highlighted_column_cluster);\r\n      });\r\n  }\r\n\r\n  InCHlib.prototype._draw_column_cluster = function(node_id){\r\n    var _this = this;\r\n      _this.columns_start_index = _this.current_column_ids[0];\r\n      _this.on_features[\"data\"] = _this.current_column_ids;\r\n      var distance = _this.distance;\r\n      _this._adjust_horizontal_sizes();\r\n      _this._delete_layers([_this.column_dendrogram_layer, _this.heatmap_layer, _this.heatmap_overlay, _this.column_cluster_group, _this.navigation_layer, _this.highlighted_rows_layer], [_this.dendrogram_hover_layer]);\r\n      if(_this.settings.heatmap_header.draw){\r\n        _this._delete_layers([_this.header_layer]);\r\n      }\r\n      _this._draw_column_dendrogram(node_id);\r\n      _this._draw_heatmap();\r\n      _this._draw_heatmap_header();\r\n      _this._draw_navigation();\r\n\r\n      if(_this.settings.dendrogram.draw){\r\n        if(distance !== _this.distance){\r\n          _this._delete_layers([_this.dendrogram_layer, _this.cluster_layer]);\r\n          var row_node = (_this.zoomed_clusters[\"row\"].length > 0)?_this.zoomed_clusters[\"row\"][_this.zoomed_clusters[\"row\"].length - 1]:_this.root_id;\r\n          _this._draw_row_dendrogram(row_node);\r\n          if(_this.last_highlighted_cluster !== null){\r\n            _this._highlight_path(_this.last_highlighted_cluster, \"#F5273C\");\r\n            _this.dendrogram_layer.draw();\r\n            _this._draw_cluster_layer(_this.last_highlighted_cluster);\r\n          }\r\n        }\r\n        else{\r\n          _this.cluster_layer.moveToTop();\r\n          _this.cluster_layer.draw();\r\n        }\r\n      }\r\n  }\r\n\r\n  InCHlib.prototype._zoom_column_cluster = function(node_id){\r\n    var _this = this;\r\n    if(node_id != _this.column_root_id){\r\n      _this.zoomed_clusters[\"column\"].push(node_id);\r\n      _this._draw_column_cluster(node_id);\r\n      _this.highlight_rows(_this.settings.highlighted_rows);\r\n      _this.events.on_columns_zoom(_this.current_column_ids, _this._unprefix(node_id));\r\n      _this.current_column_ids = [];\r\n      _this.last_highlighted_column_cluster = null;\r\n    }\r\n  }\r\n\r\n  InCHlib.prototype._unzoom_column_cluster = function(){\r\n    var _this = this;\r\n    var unzoomed = _this.zoomed_clusters[\"column\"].pop();\r\n    var zoomed_count = _this.zoomed_clusters[\"column\"].length;\r\n    var node_id = (zoomed_count > 0)?_this.zoomed_clusters[\"column\"][zoomed_count-1]:_this.column_root_id;\r\n    _this._get_column_ids(node_id);\r\n    _this._draw_column_cluster(node_id);\r\n    _this.events.on_columns_unzoom(_this._unprefix(unzoomed));\r\n    _this.current_column_ids = [];\r\n    _this._highlight_column_cluster(unzoomed);\r\n  }\r\n\r\n  InCHlib.prototype._draw_cluster = function(node_id){\r\n    var _this = this;\r\n    _this._delete_layers([_this.dendrogram_layer, _this.heatmap_layer, _this.heatmap_overlay, _this.cluster_layer, _this.navigation_layer, _this.header_layer, _this.highlighted_rows_layer], [_this.dendrogram_hover_layer]);\r\n    _this._draw_row_dendrogram(node_id);\r\n    _this._get_row_id_size();\r\n    _this._draw_heatmap();\r\n    _this._draw_heatmap_header();\r\n    _this._draw_navigation();\r\n    if(_this.settings.column_dendrogram.draw && _this.last_highlighted_column_cluster !== null){\r\n      _this._draw_column_cluster_layer(_this.last_highlighted_column_cluster);\r\n    }\r\n  }\r\n\r\n  InCHlib.prototype._zoom_cluster = function(node_id){\r\n    var _this = this;\r\n    if(node_id !== _this.root_id){\r\n      _this.zoomed_clusters[\"row\"].push(node_id);\r\n      _this._draw_cluster(node_id);\r\n      _this.highlight_rows(_this.settings.highlighted_rows);\r\n      _this.events.on_zoom(_this.current_object_ids, _this._unprefix(node_id));\r\n      _this.highlighted_rows_y = [];\r\n      _this.current_object_ids = [];\r\n      _this.last_highlighted_cluster = null;\r\n    }\r\n  }\r\n\r\n  InCHlib.prototype._unzoom_cluster = function(){\r\n    var _this = this;\r\n    var unzoomed = _this.zoomed_clusters[\"row\"].pop();\r\n    var zoomed_count = _this.zoomed_clusters[\"row\"].length;\r\n    var node_id = (zoomed_count > 0)?_this.zoomed_clusters[\"row\"][zoomed_count-1]:_this.root_id;\r\n    _this._draw_cluster(node_id);\r\n    _this.events.on_unzoom(_this._unprefix(unzoomed));\r\n    _this._highlight_cluster(unzoomed);\r\n  }\r\n\r\n  InCHlib.prototype._get_node_neighbourhood = function(node, nodes){\r\n    var _this = this;\r\n      var node_neighbourhood = {\"left_node\": {\"left_node\": {\"left_count\" : 0,\r\n                                                            \"right_count\": 0}, \r\n                                              \"right_node\": {\"left_count\" : 0,\r\n                                                             \"right_count\": 0},\r\n                                              \"left_count\" : 0.5,\r\n                                              \"right_count\": 0.5\r\n                                             },\r\n                                \"right_node\": {\"left_node\": {\"left_count\" : 0,\r\n                                                            \"right_count\": 0}, \r\n                                              \"right_node\": {\"left_count\" : 0,\r\n                                                             \"right_count\": 0},\r\n                                              \"left_count\" : 0.5,\r\n                                              \"right_count\": 0.5\r\n                                             },\r\n                                \"left_count\": nodes[node.left_child].count,\r\n                                \"right_count\": nodes[node.right_child].count,\r\n      };\r\n\r\n      var left_child = nodes[node.left_child];\r\n      var right_child = nodes[node.right_child];\r\n\r\n      var left_child_left_child = nodes[left_child.left_child];\r\n      var left_child_right_child = nodes[left_child.right_child];\r\n\r\n      var right_child_left_child = nodes[right_child.left_child];\r\n      var right_child_right_child = nodes[right_child.right_child];\r\n\r\n      if(left_child.count != 1){\r\n              node_neighbourhood.left_node.left_count = nodes[left_child.left_child].count;\r\n              node_neighbourhood.left_node.right_count = nodes[left_child.right_child].count;\r\n\r\n          if(left_child_left_child.count != 1){\r\n              node_neighbourhood.left_node.left_node.left_count = nodes[left_child_left_child.left_child].count;\r\n              node_neighbourhood.left_node.left_node.right_count = nodes[left_child_left_child.right_child].count;\r\n          }\r\n          else{\r\n              node_neighbourhood.left_node.left_node.left_count = 0.5;\r\n              node_neighbourhood.left_node.left_node.right_count = 0.5;\r\n          }\r\n\r\n          if(left_child_right_child.count != 1){\r\n              node_neighbourhood.left_node.right_node.left_count = nodes[left_child_right_child.left_child].count;\r\n              node_neighbourhood.left_node.right_node.right_count = nodes[left_child_right_child.right_child].count;\r\n          }\r\n          else{\r\n              node_neighbourhood.left_node.right_node.left_count = 0.5;\r\n              node_neighbourhood.left_node.right_node.right_count = 0.5;\r\n          }\r\n      }\r\n\r\n      if(right_child.count != 1){\r\n          node_neighbourhood.right_node.left_count = nodes[right_child.left_child].count;\r\n          node_neighbourhood.right_node.right_count = nodes[right_child.right_child].count;\r\n\r\n          if(right_child_left_child.count != 1){\r\n              node_neighbourhood.right_node.left_node.left_count = nodes[right_child_left_child.left_child].count;\r\n              node_neighbourhood.right_node.left_node.right_count = nodes[right_child_left_child.right_child].count;\r\n          }\r\n          else{\r\n              node_neighbourhood.right_node.left_node.left_count = 0.5;\r\n              node_neighbourhood.right_node.left_node.right_count = 0.5;\r\n          }\r\n\r\n          if(right_child_right_child.count != 1){\r\n              node_neighbourhood.right_node.right_node.left_count = nodes[right_child_right_child.left_child].count;\r\n              node_neighbourhood.right_node.right_node.right_count = nodes[right_child_right_child.right_child].count;\r\n          }\r\n          else{\r\n              node_neighbourhood.right_node.right_node.left_count = 0.5;\r\n              node_neighbourhood.right_node.right_node.right_count = 0.5;\r\n          }\r\n      }\r\n      return node_neighbourhood;\r\n  }\r\n\r\n  InCHlib.prototype._draw_column_dendrogram_node = function(node_id, node, current_left_count, current_right_count, x, y){\r\n    var _this = this;\r\n      \r\n      if(node.count > 1){\r\n          var node_neighbourhood = _this._get_node_neighbourhood(node, _this.column_dendrogram.nodes);\r\n          var right_child = _this.column_dendrogram.nodes[node.right_child];\r\n          var left_child = _this.column_dendrogram.nodes[node.left_child];\r\n          var x1 = _this._get_x1(node_neighbourhood, current_left_count, current_right_count);\r\n          var x2 = _this._get_x2(node_neighbourhood, current_left_count, current_right_count);\r\n          var y1 = _this._hack_round(_this.vertical_distance - _this.vertical_distance_step*node.distance);\r\n          y1 = (y1 == 0)? 2: y1;\r\n          var y2 = y1;\r\n\r\n          if(right_child.count == 1){\r\n              x2 = x2 - _this.pixels_for_dimension/2;\r\n          }\r\n\r\n          var left_distance = _this.vertical_distance - _this.vertical_distance_step*_this.column_dendrogram.nodes[node.left_child].distance;\r\n          var right_distance = _this.vertical_distance - _this.vertical_distance_step*_this.column_dendrogram.nodes[node.right_child].distance;\r\n\r\n          _this.column_dendrogram_layer.add(_this._draw_vertical_path(node_id, x1, y1, x2, y2, left_distance, right_distance));\r\n          _this._draw_column_dendrogram_node(node.left_child, left_child, current_left_count - node_neighbourhood.left_node.right_count, current_right_count + node_neighbourhood.left_node.right_count, left_distance, y1);\r\n          _this._draw_column_dendrogram_node(node.right_child, right_child, current_left_count + node_neighbourhood.right_node.left_count, current_right_count - node_neighbourhood.right_node.left_count, right_distance, y2);\r\n      }\r\n      else{\r\n        _this.column_x_coordinates[node_id] = current_right_count*_this.pixels_for_dimension;\r\n      }\r\n  }\r\n\r\n  InCHlib.prototype._get_y1 = function(node_neighbourhood, current_left_count, current_right_count){\r\n    var _this = this;\r\n      current_left_count = current_left_count-node_neighbourhood.left_node.right_count-node_neighbourhood.left_node.left_node.right_count;\r\n      var y = (current_left_count+(node_neighbourhood.left_node.left_node.right_count+node_neighbourhood.left_node.right_node.left_count)/2)*_this.pixels_for_leaf;\r\n      return y + _this.top_heatmap_distance;\r\n  }\r\n\r\n  InCHlib.prototype._get_y2 = function(node_neighbourhood, current_left_count, current_right_count){\r\n    var _this = this;\r\n      current_left_count = current_left_count+node_neighbourhood.right_node.left_node.left_count;\r\n      var y = (current_left_count+(node_neighbourhood.right_node.left_node.right_count+node_neighbourhood.right_node.right_node.left_count)/2)*_this.pixels_for_leaf;\r\n      return y + _this.top_heatmap_distance;\r\n  }\r\n\r\n  InCHlib.prototype._get_x1 = function(node_neighbourhood, current_left_count, current_right_count){\r\n    var _this = this;\r\n      current_left_count = current_left_count-node_neighbourhood.left_node.right_count-node_neighbourhood.left_node.left_node.right_count;\r\n      var x = (current_left_count+(node_neighbourhood.left_node.left_node.right_count+node_neighbourhood.left_node.right_node.left_count)/2)*_this.pixels_for_dimension;\r\n      return (_this.heatmap_distance+_this.on_features[\"data\"].length * _this.pixels_for_dimension)-x;\r\n  }\r\n\r\n  InCHlib.prototype._get_x2 = function(node_neighbourhood, current_left_count, current_right_count){\r\n    var _this = this;\r\n      current_left_count = current_left_count+node_neighbourhood.right_node.left_node.left_count;\r\n      var x = (current_left_count+(node_neighbourhood.right_node.left_node.right_count+node_neighbourhood.right_node.right_node.left_count)/2)*_this.pixels_for_dimension;;\r\n      return (_this.heatmap_distance+_this.on_features[\"data\"].length * _this.pixels_for_dimension)-x;\r\n  }\r\n\r\n  InCHlib.prototype._draw_vertical_path = function(path_id, x1, y1, x2, y2, left_distance, right_distance){\r\n    var _this = this;\r\n      var path_group = new Konva.Group({});\r\n      var path = _this.objects_ref.node.clone({points: [x1, left_distance, x1, y1, x2, y2, x2, right_distance], id: \"col\" + path_id,})\r\n      var path_rect = _this.objects_ref.node_rect.clone({x: x2-1,\r\n                                                            y: y1-1,\r\n                                                            width: x1 - x2 + 2,\r\n                                                            height: _this.header_height - y1,\r\n                                                            id: \"col_rect\" + path_id,\r\n                                                            path: path,\r\n                                                            path_id: path_id,\r\n                                                          });\r\n\r\n      path_group.add(path, path_rect);\r\n      return path_group;\r\n  }\r\n\r\n  InCHlib.prototype._draw_horizontal_path = function(path_id, x1, y1, x2, y2, left_distance, right_distance, path_color){\r\n    var _this = this;\r\n    if(path_color === undefined){\r\n      path_color = \"gray\";\r\n    }\r\n    \r\n    var path_group = new Konva.Group({});\r\n    var path = _this.objects_ref.node.clone({points: [left_distance, y1, x1, y1, x2, y2, right_distance, y2],\r\n                                                id: path_id, stroke: path_color});\r\n    var path_rect = _this.objects_ref.node_rect.clone({x: x1-1,\r\n                                                          y: y1-1,\r\n                                                          width: _this.distance - x1,\r\n                                                          height: y2 - y1,\r\n                                                          id: [path_id, \"rect\"].join(\"_\"),\r\n                                                          path: path,\r\n                                                          path_id: path_id,\r\n                                                        });\r\n    path_group.add(path, path_rect);\r\n    return path_group;\r\n  }\r\n\r\n  InCHlib.prototype._filter_icon_click = function(filter_button){\r\n    var _this = this;\r\n      var filter_features_element = _this.target_element.find(\".filter_features\");\r\n      var symbol = \"✖\";\r\n\r\n      if(filter_features_element.length){\r\n          filter_features_element.fadeIn(\"fast\");\r\n          var overlay = _this._draw_target_overlay();\r\n      }\r\n      else{\r\n          filter_list = \"\";\r\n          \r\n          for(var attr in _this.header){\r\n              if(_this.features[attr]){\r\n                  symbol = \"✔\";\r\n              }\r\n              if(attr < _this.dimensions){\r\n                  var text = _this.header[attr];\r\n                  if(text == \"\"){\r\n                      text =  parseInt(attr) + 1 + \". column\";\r\n                  }\r\n                  filter_list = filter_list + \"<li class='feature_switch' data-num='\" + attr + \"'><span class='symbol'>\" + symbol + \"</span>  \" + text +\"</li>\";\r\n              }\r\n          }\r\n          \r\n          _this.target_element.append(\"<div class='filter_features'><ul>\" + filter_list + \"</ul><hr /><div><span class='cancel_filter_list'>Cancel</span>&nbsp;&nbsp;&nbsp;<span class='update_filter_list'>Update</span></div></div>\");\r\n          filter_features_element = _this.target_element.find(\".filter_features\");\r\n          \r\n          filter_features_element.css({\"display\":\"none\",\r\n              \"top\": 45,\r\n              \"left\": 0,\r\n              \"border-radius\":\"5px\",\r\n              \"text-align\":\"center\",\r\n              \"position\":\"absolute\",\r\n              \"background-color\":\"#ffffff\",\r\n              \"border\":\"solid 2px #DEDEDE\",\r\n              \"padding-top\":\"5px\",\r\n              \"padding-left\":\"15px\",\r\n              \"padding-bottom\":\"10px\",\r\n              \"padding-right\":\"15px\",\r\n              \"font-weight\":\"bold\",\r\n              \"font-size\": \"14px\",\r\n              \"z-index\": 1000,\r\n              \"font-family\": _this.settings.heatmap.font.fontFamily\r\n          });\r\n\r\n          filter_features_element.find(\"ul\").css({\r\n              \"list-style-type\":\"none\",\r\n              \"margin-left\":\"0\",\r\n              \"padding-left\":\"0\",\r\n              \"text-align\":\"left\",\r\n          });\r\n\r\n          filter_features_element.find(\"li\").css({\r\n              \"color\":\"green\",\r\n              \"margin-top\":\"5px\",\r\n          });\r\n\r\n          filter_features_element.find(\"div\").css({\r\n              \"cursor\":\"pointer\",\r\n              \"opacity\":\"0.7\",\r\n          });\r\n\r\n          var overlay = _this._draw_target_overlay();\r\n          filter_features_element.fadeIn(\"fast\");\r\n\r\n          _this.target_element.find(\".feature_switch\").click(function(){\r\n              var num = parseInt($(this).attr(\"data-num\"));\r\n              var symbol_element = $(this).find(\"span\");\r\n              _this.features[num] = !_this.features[num];\r\n\r\n              if(_this.features[num]){\r\n                  symbol_element.text(\"✔\");\r\n                  $(this).css(\"color\", \"green\");\r\n              }\r\n              else{\r\n                  symbol_element.text(\"✖\");\r\n                  $(this).css(\"color\", \"red\");\r\n              }\r\n\r\n              _this._set_on_features();\r\n          });\r\n\r\n          $(function(){\r\n              filter_features_element.click(function(){\r\n                  return false;\r\n              });\r\n\r\n              filter_features_element.mousedown(function(){\r\n                  return false;\r\n              });\r\n\r\n             $(\"#\" + _this.settings.target + \" .filter_features ul li,\" + \"#\" + _this.settings.target + \" .filter_features div span\").hover(\r\n             function(){\r\n                $(this).css({\r\n                      \"cursor\": \"pointer\",\r\n                      \"opacity\": \"0.7\",\r\n                  });\r\n             },\r\n             function(){\r\n                $(this).css({\r\n                      \"cursor\": \"default\",\r\n                      \"opacity\": \"1\",\r\n                  });\r\n             });\r\n          });\r\n\r\n          _this.target_element.find(\".cancel_filter_list\").click(function(){\r\n              filter_features_element.fadeOut(\"fast\");\r\n              overlay.fadeOut(\"fast\");\r\n          });\r\n\r\n          overlay.click(function(){\r\n              filter_features_element.fadeOut(\"fast\");\r\n              overlay.fadeOut(\"fast\");\r\n          });\r\n\r\n          _this.target_element.find(\".update_filter_list\").click(function(){\r\n              filter_features_element.fadeOut(\"slow\");\r\n              overlay.fadeOut(\"slow\");\r\n\r\n              var node_id = (_this.zoomed_clusters[\"row\"].length > 0)?_this.zoomed_clusters[\"row\"][_this.zoomed_clusters[\"row\"].length-1]:_this.root_id;\r\n              var highlighted_cluster = _this.last_highlighted_cluster;\r\n              _this.last_highlighted_cluster = null;\r\n              _this._adjust_horizontal_sizes();              \r\n              _this._delete_all_layers();\r\n              _this._draw_stage_layer();\r\n              if(_this.settings.dendrogram.draw){\r\n                _this._draw_dendrogram_layers();\r\n                _this._draw_row_dendrogram(node_id);\r\n                _this._draw_dendrogram_layers();\r\n                if(_this.settings.column_dendrogram.draw && _this._visible_features_equal_column_dendrogram_count()){\r\n                  _this._draw_column_dendrogram(_this.column_root_id);\r\n                }\r\n              }\r\n\r\n              _this._draw_navigation();\r\n              _this._draw_heatmap();\r\n              _this._draw_heatmap_header();\r\n\r\n              if(highlighted_cluster != null){\r\n                  _this._highlight_cluster(highlighted_cluster);\r\n              }\r\n          });\r\n      }\r\n  }\r\n  InCHlib.prototype._draw_target_overlay = function(){\r\n    var _this = this;\r\n    var overlay = _this.target_element.find(\".target_overlay\");\r\n\r\n    if(overlay.length){\r\n      overlay.fadeIn(\"fast\");\r\n    }\r\n    else{\r\n      overlay = $(\"<div class='target_overlay'></div>\");\r\n      overlay.css({\"background-color\": \"white\", \r\n                      \"position\": \"absolute\",\r\n                      \"top\": 0,\r\n                      \"left\": 0,\r\n                      \"right\": 0,\r\n                      \"bottom\": 0,\r\n                      \"opacity\": 0.5\r\n          });\r\n      _this.target_element.append(overlay);\r\n    }\r\n\r\n    return overlay;\r\n  }\r\n\r\n  InCHlib.prototype._refresh_icon_click = function(){\r\n    var _this = this;\r\n    _this.redraw();\r\n  }\r\n\r\n  InCHlib.prototype._export_icon_click = function(){\r\n    var _this = this;\r\n    html2canvas(_this.target_element[0], {backgroundColor: null, scale: 2}).then(canvas => {\r\n        var a = document.createElement('a');\r\n        a.href = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\r\n        a.download = 'inchlib.png';\r\n        a.click();\r\n    });\r\n    // var export_menu = _this.target_element.find(\".export_menu\");\r\n    // var overlay = _this._draw_target_overlay();\r\n\r\n    // if(export_menu.length){\r\n    //   export_menu.fadeIn(\"fast\");\r\n    // }\r\n    // else{\r\n    //   export_menu = $(\"<div class='export_menu'><div><button type='submit' data-action='open'>Show image</button></div><div><button type='submit' data-action='save'>Save image</button></div></div>\");\r\n    //   _this.target_element.append(export_menu);\r\n    //   export_menu.css({\"position\": \"absolute\",\r\n    //                   \"top\": 45,\r\n    //                   \"left\": _this.settings.width - 125,\r\n    //                   \"font-size\": \"12px\",\r\n    //                   \"border\": \"solid #D2D2D2 1px\",\r\n    //                   \"border-radius\": \"5px\",\r\n    //                   \"padding\": \"2px\",\r\n    //                   \"background-color\": \"white\"});\r\n\r\n    //   var buttons = export_menu.find(\"button\");\r\n    //   buttons.css({\"padding-top\": \"7px\", \"padding-bottom\": \"5px\", \"padding-right\": \"8px\", \"padding-left\": \"8px\", \"color\": \"white\", \"border\": \"solid #D2D2D2 1px\", \"width\": \"100%\", \"background-color\": \"#2171b5\", \"font-weight\": \"bold\"});  \r\n\r\n    //   buttons.hover(\r\n    //     function(){$(this).css({\"cursor\": \"pointer\", \"opacity\": 0.7})},\r\n    //     function(){$(this).css({\"opacity\": 1})}\r\n    //   );\r\n\r\n    //   overlay.click(function(){\r\n    //     export_menu.fadeOut(\"fast\");\r\n    //     overlay.fadeOut(\"fast\");\r\n    //   });\r\n\r\n    //   buttons.click(function(){\r\n    //     var action = $(this).attr(\"data-action\");\r\n    //     var zoom = 3;\r\n    //     var width = _this.stage.width();\r\n    //     var height = _this.stage.height();\r\n    //     var loading_div = $(\"<h3 style='margin-top: 100px; margin-left: 100px; width: \" + width + \"px; height: \" + height + \"px;'>Loading...</h3>\");\r\n    //     _this.target_element.after(loading_div);\r\n    //     _this.target_element.hide();\r\n    //     _this.stage.width(width*zoom);\r\n    //     _this.stage.height(height*zoom);\r\n    //     _this.stage.scale({x: zoom, y:zoom});\r\n    //     _this.stage.draw();\r\n    //     _this.navigation_layer.hide();\r\n    //     _this.stage.toDataURL({\r\n    //       quality: 1,\r\n    //       callback: function(dataUrl){\r\n    //         if(action === \"open\"){\r\n    //           open_image(dataUrl);\r\n    //         }\r\n    //         else{\r\n    //           download_image(dataUrl);\r\n    //         }\r\n    //         _this.stage.width(width);\r\n    //         _this.stage.height(height);\r\n    //         _this.stage.scale({x: 1, y:1});\r\n    //         _this.stage.draw();\r\n    //         loading_div.remove();\r\n    //         _this.target_element.show();\r\n    //         _this.navigation_layer.show();\r\n    //         _this.navigation_layer.draw();\r\n    //         overlay.trigger(\"click\");\r\n    //       }\r\n    //     });\r\n    //   });\r\n    // }\r\n\r\n    // function download_image(dataUrl){\r\n    //   var fileName = 'inchlib.png';\r\n\r\n    //   if ('msToBlob' in _this.stage) { // IE10+\r\n    //     var blob = _this.stage.msToBlob();\r\n    //     navigator.msSaveBlob(blob, fileName);\r\n    //   } else {\r\n    //     var a = document.createElement('a');\r\n    //     a.setAttribute('href', dataUrl);\r\n    //     a.setAttribute('target', '_blank');\r\n    //     a.setAttribute('download', fileName);\r\n    //     a.style.display = 'none';\r\n    //     document.body.appendChild(a);\r\n    //     a.click();\r\n    //     document.body.removeChild(a);\r\n    //   }\r\n    // };\r\n    \r\n    // function open_image(dataUrl){\r\n    //   window.open(dataUrl, \"_blank\");\r\n    // };\r\n  };\r\n\r\n  InCHlib.prototype._color_scale_click = function(icon, evt){\r\n    var _this = this;\r\n    var i, option, key, value;\r\n    var color_options = {\"heatmap\": \"Heatmap data colors\"};\r\n    var value_options = [\"min\", \"middle\", \"max\"];\r\n\r\n    if(_this.settings.metadata.draw){\r\n      color_options[\"metadata\"] = \"Metadata colors\";\r\n    }\r\n\r\n    if(_this.settings.column_metadata.draw){\r\n      color_options[\"column_metadata\"] = \"Column metadata colors\";\r\n    }\r\n\r\n    \r\n    var settings_form = _this.target_element.find(\".inchlib-settings_form\");\r\n    var overlay = _this._draw_target_overlay();\r\n\r\n    if(settings_form.length){\r\n      settings_form.fadeIn(\"fast\");\r\n    }\r\n    else{\r\n      settings_form = $(\"<form class='inchlib-settings_form'></form>\");\r\n      var options = \"\", color_1, color_2, color_3;\r\n\r\n      for(i = 0, keys = Object.keys(color_options), len = keys.length; i < len; i++){\r\n        key = keys[i];\r\n        var section = $(\"<div class='inchlib-section' data-name='\" + key + \"' ></div>\").css({\"margin-bottom\": 5, \"padding-bottom\": 5, \"border-bottom\": \"solid #D2D2D2 1px\"});\r\n        color_1 = _this._get_color_for_value(0,0,1,0.5,_this.settings[key].colors.scale);\r\n        color_2 = _this._get_color_for_value(0.5,0,1,0.5,_this.settings[key].colors.scale);\r\n        color_3 = _this._get_color_for_value(1,0,1,0.5,_this.settings[key].colors.scale);\r\n\r\n        section.append($(\"<div class='form_label'>\" + color_options[key] + \"</div>\"));\r\n        section.append($(\"<div><input class='inchlib-color_input' type='text' name='colors.scale' value='\"+ _this.settings[key].colors.scale + \"'/> <div class='color_button' style='background: linear-gradient(to right, \" + color_1 + \",\" + color_2 + \",\" + color_3 + \")'></div></div>\")\r\n          .css({\"display\": \"flex\", \"align-items\": \"center\"}));\r\n        \r\n        var params = $(\"<div class='inchlib-params'></div>\").css({\"display\": \"flex\", \"justify-content\": \"space-between\"});\r\n        for(i2 = 0, len2 = value_options.length; i2 < len2; i2++){\r\n          key2 = value_options[i2];\r\n          params.append($(\"<div><div class='form_label'>\" + key2 + \"</div><input type='text' name='colors.params.\" + key2 +\"' value='\"+ _this.settings[key].colors.params[key2] + \"'/></div>\"));\r\n        }\r\n        section.append(params);\r\n        section.append($(\"<div><div class='form_label'>Value type</div>\\\r\n                  <select name='value_type'>\\\r\n                    <option value='percentile' selected>Percentile</option>\\\r\n                    <option value='value'>Value</option>\\\r\n                  </select></div>\\\r\n                  <div><div class='form_label'>Color by</div>\\\r\n                  <select name='independent_columns'>\\\r\n                    <option value='true' selected>By columns</option>\\\r\n                    <option value='false'>Entire heatmap</option>\\\r\n                  </select></div>\"));\r\n        settings_form.append(section);\r\n      }\r\n      settings_form.append($(\"<button type='submit'>Redraw</button>\"));\r\n\r\n      _this.target_element.append(settings_form);\r\n      settings_form.css({\"width\": 150, \"z-index\": 1000, \"position\": \"absolute\", \"top\": 110, \"left\": 0, \"padding\": \"10px\", \"border\": \"solid #D2D2D2 2px\", \"border-radius\": \"5px\", \"background-color\": \"white\", \"font-size\": \"small\"});\r\n      _this.target_element.find(\".inchlib-settings_form .color_button\").css({\"border\": \"solid #D2D2D2 1px\", \"height\": \"15px\", \"width\": \"30px\", \"display\": \"inline-block\"});    \r\n      _this.target_element.find(\".inchlib-settings_form input[type='text']\").css({\"width\": 40});  \r\n      _this.target_element.find(\".inchlib-settings_form .inchlib-color_input\").css({\"width\": 80, \"margin-right\": 3});  \r\n      _this.target_element.find(\".inchlib-settings_form .inchlib-section > *\").css({\"margin-bottom\": 5});  \r\n      _this.target_element.find(\".inchlib-settings_form .form_label\").css({\"color\": \"gray\", \"margin-bottom\": 5, \"font-style\": \"italic\"});  \r\n      _this.target_element.find(\".inchlib-settings_form button\").css({\"padding\": 5, \"color\": \"white\", \"border\": \"none\", \"width\": \"100%\", \"background-color\": \"#2171b5\", \"font-weight\": \"bold\"});\r\n\r\n      overlay.click(function(){\r\n        settings_form.fadeOut(\"fast\");\r\n        overlay.fadeOut(\"fast\");\r\n      });\r\n\r\n      var color_buttons = settings_form.find(\".color_button\");\r\n      \r\n      color_buttons.hover(\r\n        function(){$(this).css({\"cursor\": \"pointer\", \"opacity\": 0.7})},\r\n        function(){$(this).css({\"opacity\": 1})}\r\n      );\r\n\r\n      color_buttons.click(function(evt){\r\n        _this._draw_color_scales_select(this, evt);\r\n      });\r\n\r\n      settings_form.submit(function(evt){\r\n        var settings_fieldset = $(this).find(\"input, select\");\r\n        \r\n        evt.preventDefault();\r\n        evt.stopPropagation();\r\n\r\n        settings_fieldset.each(function(){\r\n            var settings_section = $(this).parents(\".inchlib-section\").attr(\"data-name\");\r\n            option = $(this);\r\n            key = option.attr(\"name\");\r\n            var path = key.split(\".\");\r\n            value = option.val();\r\n            if(value_options.indexOf(path[path.length - 1]) !== -1){\r\n              value = parseFloat(value);\r\n            }\r\n\r\n            if(path.length == 1){\r\n              _this.settings[settings_section][path[0]] = value;\r\n            }\r\n            else if(path.length == 2){\r\n              _this.settings[settings_section][path[0]][path[1]] = value;\r\n            }\r\n            else{\r\n              _this.settings[settings_section][path[0]][path[1]][path[2]] = value; \r\n            }\r\n        });\r\n        _this.redraw_heatmap();\r\n        _this._update_color_scale();\r\n        overlay.trigger('click');\r\n      })\r\n    }\r\n  }\r\n\r\n  InCHlib.prototype._draw_color_scales_select = function(element, evt){\r\n    var _this = this;\r\n    var scales_div = _this.target_element.find(\".color_scales\");\r\n    var scale_divs;\r\n\r\n    if(scales_div.length){\r\n      scales_div.fadeIn(\"fast\");\r\n      scale_divs = scales_div.find(\".color_scale\");\r\n    }\r\n    else{\r\n      scales_div = $(\"<div class='color_scales'></div>\").css({\"z-index\": 10});\r\n      var scale, color_1, color_2, color_3, key;\r\n\r\n      for(var i = 0, keys = Object.keys(_this.colors), len = keys.length; i < len; i++){\r\n        key = keys[i];\r\n        color_1 = _this._get_color_for_value(0,0,1,0.5,key);\r\n        color_2 = _this._get_color_for_value(0.5,0,1,0.5,key);\r\n        color_3 = _this._get_color_for_value(1,0,1,0.5,key);\r\n        scale = \"<div class='color_scale' data-scale_acronym='\" + key + \"' style='background: linear-gradient(to right, \" + color_1 + \",\" + color_2 + \",\" + color_3 + \")'></div>\";\r\n        scales_div.append(scale);\r\n      }\r\n      _this.target_element.append(scales_div);\r\n      scales_div.css({\"border\": \"solid #D2D2D2 2px\",\r\n                     \"border-radius\": \"5px\",\r\n                     \"padding\": \"5px\",\r\n                     \"position\": \"absolute\",\r\n                     \"top\": 110,\r\n                     \"left\": 170,\r\n                     \"background-color\": \"white\"});\r\n\r\n      scale_divs = _this.target_element.find(\".color_scale\");\r\n      scale_divs.css({\"margin-top\":\"3px\",\r\n                      \"width\": \"80px\",\r\n                      \"height\": \"20px\",\r\n                      \"border\": \"solid #D2D2D2 1px\",});\r\n\r\n      scale_divs.hover(\r\n        function(){$(this).css({\"cursor\": \"pointer\", \"opacity\": 0.7})},\r\n        function(){$(this).css({\"opacity\": 1})}\r\n      );\r\n\r\n      _this.target_element.find(\".target_overlay\").click(function(){\r\n        scales_div.fadeOut(\"fast\");\r\n      });\r\n    }\r\n\r\n    scale_divs.on(\"click\", function(){\r\n      var color = $(this).attr(\"data-scale_acronym\");\r\n      var input = $(element).prev(\"input:first\").val(color);\r\n      $(element).css({\"background\": \"linear-gradient(to right, \" + _this._get_color_for_value(0,0,1,0.5,color) + \",\" + _this._get_color_for_value(0.5,0,1,0.5,color) + \",\" + _this._get_color_for_value(1,0,1,0.5,color) + \")\"})\r\n      scales_div.fadeOut(\"fast\");\r\n      scale_divs.off(\"click\");\r\n    });\r\n\r\n  };\r\n\r\n  InCHlib.prototype._color_scale_mouseover = function(color_scale, layer){\r\n    var _this = this;\r\n      var label = color_scale.getAttr(\"label\");\r\n      var x = color_scale.getAttr(\"x\");\r\n      var y = color_scale.getAttr(\"y\");\r\n\r\n      _this.icon_tooltip = _this.objects_ref.tooltip_label.clone({x: x,\r\n          y: y + 25\r\n      });\r\n\r\n      _this.icon_tooltip.add(_this.objects_ref.tooltip_tag.clone());\r\n      _this.icon_tooltip.add(_this.objects_ref.tooltip_text.clone({text: label}));\r\n\r\n      layer.add(_this.icon_tooltip);\r\n      _this.icon_tooltip.moveToTop();\r\n      color_scale.setOpacity(0.7);\r\n      layer.draw();\r\n  }\r\n\r\n  InCHlib.prototype._color_scale_mouseout = function(color_scale, layer){\r\n    var _this = this;\r\n      _this.icon_tooltip.destroy();\r\n      color_scale.setOpacity(1);\r\n      layer.draw();\r\n  }\r\n\r\n  InCHlib.prototype._unzoom_icon_click = function(){\r\n    var _this = this;\r\n    _this._unzoom_cluster();\r\n  };\r\n\r\n  InCHlib.prototype._column_unzoom_icon_click = function(){\r\n    var _this = this;\r\n      _this._unzoom_column_cluster();\r\n  };\r\n\r\n  InCHlib.prototype._icon_mouseover = function(icon, icon_overlay, layer){\r\n    var _this = this;\r\n    if(icon.getAttr(\"id\") !== \"help_icon\"){\r\n      var label = icon.getAttr(\"label\");\r\n      var x = icon_overlay.getAttr(\"x\");\r\n      var y = icon_overlay.getAttr(\"y\");\r\n      var width = icon_overlay.getWidth();\r\n      var height = icon_overlay.getHeight();\r\n      var icon_id = icon.getAttr(\"id\");\r\n\r\n      if(icon_id === \"export_icon\"){\r\n        x = x - 100;\r\n        y = y - 50;\r\n      }\r\n\r\n      _this.icon_tooltip = _this.objects_ref.tooltip_label.clone({x: x,\r\n          y: y+1.2*height\r\n      });\r\n\r\n      _this.icon_tooltip.add(_this.objects_ref.tooltip_tag.clone());\r\n      _this.icon_tooltip.add(_this.objects_ref.tooltip_text.clone({text: label}));\r\n      layer.add(_this.icon_tooltip);    \r\n    }\r\n    icon.setFill(\"black\");\r\n    layer.draw();\r\n  }\r\n\r\n  InCHlib.prototype._icon_mouseout = function(icon, icon_overlay, layer){\r\n    var _this = this;\r\n      if(icon.getAttr(\"id\") !== \"help_icon\"){\r\n        _this.icon_tooltip.destroy();\r\n      }\r\n      icon.setFill(\"grey\");\r\n      layer.draw();\r\n  }\r\n\r\n  InCHlib.prototype._help_mouseover = function(){\r\n    var _this = this;\r\n    var help_element = _this.target_element.find(\".inchlib_help\");\r\n    if(help_element.length){\r\n      help_element.show();\r\n    }\r\n    else{\r\n      help_element = $(\"<div class='inchlib_help'><ul><li>Zoom clusters by a long click on a dendrogram node.</li></ul></div>\");\r\n      help_element.css({\"position\": \"absolute\",\r\n                        \"top\": 70,\r\n                        \"left\": _this.settings.width - 200,\r\n                        \"font-size\": 12,\r\n                        \"padding-right\": 15,\r\n                        \"width\": 200,\r\n                        \"background-color\": \"white\",\r\n                        \"border-radius\": 5,\r\n                        \"border\": \"solid #DEDEDE 2px\",\r\n                        \"z-index\": 1000\r\n\r\n                      });\r\n      _this.target_element.append(help_element);\r\n    }\r\n  }\r\n\r\n  InCHlib.prototype._help_mouseout = function(){\r\n    var _this = this;\r\n    _this.target_element.find(\".inchlib_help\").hide();\r\n  }\r\n\r\n  InCHlib.prototype._dendrogram_layers_click=function(layer, evt){\r\n    var _this = this;\r\n    var path_id = evt.target.attrs.path_id;\r\n    layer.fire(\"mouseout\", layer, evt);\r\n    _this._highlight_cluster(path_id);\r\n    _this.events.dendrogram_node_onclick(_this.current_object_ids, _this._unprefix(path_id), evt);\r\n  }\r\n\r\n  InCHlib.prototype._column_dendrogram_layers_click=function(layer, evt){\r\n    var _this = this;\r\n      var path_id = evt.target.attrs.path_id;\r\n      layer.fire(\"mouseout\", layer, evt);\r\n      _this._highlight_column_cluster(path_id);\r\n      _this.events.column_dendrogram_node_onclick(_this.current_column_ids, _this._unprefix(path_id), evt);\r\n  }\r\n\r\n  InCHlib.prototype._dendrogram_layers_mousedown = function(layer, evt){\r\n      \r\n      // if(_this.settings.dendrogram.draw || _this.settings.column_dendrogram.draw)\r\n          var _this = this;\r\n      \r\n      // if(_this.settings.dendrogram.draw || _this.settings.column_dendrogram.draw)\r\n          var node_id = evt.target.attrs.path_id;\r\n    clearTimeout(_this.timer);\r\n    _this.timer = setTimeout(function() {\r\n        _this._get_object_ids(node_id);\r\n        _this._zoom_cluster(node_id);\r\n    }, 500);\r\n  }\r\n\r\n  InCHlib.prototype._column_dendrogram_layers_mousedown = function(layer, evt){\r\n      \r\n      // if(_this.settings.dendrogram.draw || _this.settings.column_dendrogram.draw)\r\n          var _this = this;\r\n      \r\n      // if(_this.settings.dendrogram.draw || _this.settings.column_dendrogram.draw)\r\n          var node_id = evt.target.attrs.path_id;\r\n    clearTimeout(_this.timer);\r\n    _this.timer = setTimeout(function() {\r\n        _this._get_column_ids(node_id);\r\n        _this._zoom_column_cluster(node_id);\r\n    }, 500);\r\n  }\r\n\r\n      \r\n      // if(_this.settings.dendrogram.draw || _this.settings.column_dendrogram.draw)\r\n        InCHlib.prototype._dendrogram_layers_mouseup = function(layer, evt){\r\n    var _this = this;\r\n    clearTimeout(_this.timer);\r\n  }\r\n\r\n  InCHlib.prototype._dendrogram_layers_mouseout = function(layer, evt){\r\n    var _this = this;\r\n    if(_this.path_overlay !== undefined){\r\n      _this.path_overlay.destroy();\r\n    }\r\n    _this.dendrogram_hover_layer.draw();\r\n  }\r\n\r\n  InCHlib.prototype._dendrogram_layers_mouseover = function(layer, evt){\r\n    var _this = this;\r\n    _this.path_overlay = evt.target.attrs.path.clone({\"strokeWidth\": 4});\r\n    _this.dendrogram_hover_layer.add(_this.path_overlay);\r\n    _this.dendrogram_hover_layer.draw();\r\n  }\r\n\r\n  InCHlib.prototype._visible_features_equal_column_dendrogram_count = function(){\r\n    var _this = this;\r\n      if((_this.on_features[\"data\"].length + _this.on_features[\"metadata\"].length) == _this.current_column_count){\r\n          return true;\r\n      }\r\n      return false;\r\n  }\r\n\r\n  InCHlib.prototype._get_color_for_value = function(value, min, max, middle, color_scale){\r\n    var _this = this;\r\n      var color = _this.colors[color_scale];\r\n      var c1 = color[\"start\"];\r\n      var c2 = color[\"end\"];\r\n\r\n      if(value > max){\r\n        return 'rgb('+c2.r+','+c2.g+','+c2.b+')';\r\n      }\r\n\r\n      if(min == max || value < min){\r\n        return 'rgb('+c1.r+','+c1.g+','+c1.b+')';\r\n      }\r\n\r\n\r\n      if(color[\"middle\"] !== undefined){\r\n          \r\n          if(value >= middle){\r\n              if(middle == max){\r\n                return 'rgb('+c2.r+','+c2.g+','+c2.b+')';\r\n              }\r\n\r\n              min = middle;\r\n              c1 = color[\"middle\"];\r\n              c2 = color[\"end\"];\r\n          }\r\n          else{\r\n              if(middle == min){\r\n                return 'rgb('+c1.r+','+c1.g+','+c1.b+')';\r\n              }\r\n              max = middle;\r\n              c1 = color[\"start\"];\r\n              c2 = color[\"middle\"];\r\n          }\r\n      }\r\n\r\n      var position = (value-min)/(max-min);\r\n      var r = _this._hack_round(c1.r+(position*(c2.r-c1.r)));\r\n      var g = _this._hack_round(c1.g+(position*(c2.g-c1.g)));\r\n      var b = _this._hack_round(c1.b+(position*(c2.b-c1.b)));\r\n      return 'rgb('+r+','+g+','+b+')';\r\n  }\r\n\r\n  InCHlib.prototype._get_font_size = function(text_length, width, height, max_font_size){\r\n    var _this = this;\r\n    var max_possible_size = height - 2;\r\n    var font_size = max_possible_size;\r\n\r\n    if(font_size/2*text_length > width-10){\r\n        font_size = font_size/(font_size/2*text_length/(width-10));\r\n    };\r\n    font_size = (font_size > max_possible_size)?max_possible_size:font_size;\r\n    font_size = (font_size > max_font_size)?max_font_size:font_size;\r\n    return font_size;\r\n  }\r\n\r\n  InCHlib.prototype._get_object_ids = function(node_id){\r\n    var _this = this;\r\n    _this.current_object_ids = [];\r\n    _this._collect_object_ids(node_id);\r\n  }\r\n\r\n  InCHlib.prototype._collect_object_ids = function(node_id){\r\n    var _this = this;\r\n      if(_this.data.nodes[node_id][\"left_child\"] !== undefined){\r\n        _this._collect_object_ids(_this.data.nodes[node_id][\"left_child\"]);\r\n        _this._collect_object_ids(_this.data.nodes[node_id][\"right_child\"]);\r\n      }\r\n      else{\r\n        _this.current_object_ids.push.apply(_this.current_object_ids, _this.data.nodes[node_id][\"objects\"])\r\n      }\r\n  }\r\n\r\n  InCHlib.prototype._get_column_ids = function(node_id){\r\n    var _this = this;\r\n      _this.current_column_ids = [];\r\n      _this._collect_column_ids(node_id);\r\n      _this.current_column_ids.sort(function(a,b){return a - b});\r\n  }\r\n\r\n  InCHlib.prototype._collect_column_ids = function(node_id){\r\n    var _this = this;\r\n    if(_this.column_dendrogram.nodes[node_id][\"left_child\"] !== undefined){\r\n      _this._collect_column_ids(_this.column_dendrogram.nodes[node_id][\"left_child\"]);\r\n      _this._collect_column_ids(_this.column_dendrogram.nodes[node_id][\"right_child\"]);\r\n    }\r\n    else{\r\n      _this.current_column_ids.push(_this.nodes2columns[node_id]);\r\n    }\r\n  }\r\n\r\n  InCHlib.prototype._hack_size = function(obj) {\r\n    var _this = this;\r\n      return Object.keys(obj).length;\r\n  };\r\n\r\n  InCHlib.prototype._hack_round = function(value){\r\n    var _this = this;\r\n      return (0.5 + value) >> 0;\r\n  }\r\n\r\n  InCHlib.prototype._is_number = function(n){\r\n    var _this = this;\r\n      return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n\r\n  InCHlib.prototype._row_mouseenter = function(evt){\r\n    var _this = this;\r\n      var row_id = evt.target.parent.getAttr(\"id\");\r\n      var visible = _this._get_visible_count();\r\n\r\n      if(evt.target.parent.attrs.class !== \"column_metadata\"){\r\n          _this.highlighted_row = row_id;\r\n          var y = _this.leaves_y_coordinates[row_id];\r\n          var x = _this.heatmap_distance;\r\n          \r\n          _this.row_overlay = _this.objects_ref.heatmap_line.clone({points: [x, y, x + _this.heatmap_width, y],\r\n            strokeWidth: _this.pixels_for_leaf,\r\n            stroke: \"#FFFFFF\",\r\n            opacity: 0.3,\r\n            listening: false});\r\n\r\n          _this.heatmap_overlay.add(_this.row_overlay);\r\n          _this.heatmap_overlay.draw();\r\n          _this.events.row_onmouseover(_this.data.nodes[row_id].objects, evt);\r\n      }\r\n  }\r\n\r\n  InCHlib.prototype._row_mouseleave = function(evt){\r\n    var _this = this;\r\n      _this.row_overlay.destroy();\r\n      _this.events.row_onmouseout(evt);\r\n  };\r\n\r\n  InCHlib.prototype._get_cell_data = function(evt){\r\n    var _this = this;\r\n    var attrs = evt.target.attrs;\r\n    var column = attrs.column.split(\"_\");\r\n    var header_type2value = {\"d\": _this.heatmap_header[column[1]],\r\n                             \"m\": _this.metadata_header[column[1]],\r\n                             \"Count\": \"Count\"};\r\n    \r\n    if(_this.column_metadata_header !== undefined){\r\n      header_type2value[\"cm\"] = _this.column_metadata_header[column[1]];\r\n    }\r\n    \r\n    return {\"value\": attrs.value, \"header\": header_type2value[column[0]]};\r\n\r\n  }\r\n\r\n  InCHlib.prototype._draw_col_label = function(evt){\r\n      var _this = this;\r\n      var parent = evt.target.parent;\r\n      var i, line;\r\n      var attrs = evt.target.attrs;\r\n      var points = attrs.points;\r\n      var x = _this._hack_round((points[0] + points[2])/2);\r\n      var y = points[1]-0.5*_this.pixels_for_leaf;\r\n      var column = attrs.column.split(\"_\");\r\n      var header_type2value = {\"d\": _this.heatmap_header[column[1]],\r\n                               \"m\": _this.metadata_header[column[1]],\r\n                               \"Count\": \"Count\"};\r\n      \r\n      if(_this.column_metadata_header !== undefined){\r\n        header_type2value[\"cm\"] = _this.column_metadata_header[column[1]];\r\n      }\r\n      \r\n      var header = header_type2value[column[0]];\r\n\r\n      if(header !== _this.last_column){\r\n        _this.column_overlay.destroy();\r\n        _this.last_column = attrs.column;\r\n        _this.column_overlay = _this.objects_ref.heatmap_line.clone({points: [x, _this.header_height, x, _this.header_height + _this.column_metadata_height + (_this.heatmap_array.length+0.5)*_this.pixels_for_leaf],\r\n          strokeWidth: _this.pixels_for_dimension,\r\n          stroke: \"#FFFFFF\",\r\n          opacity: 0.3,\r\n          listening: false});\r\n\r\n        _this.heatmap_overlay.add(_this.column_overlay);\r\n      }\r\n      \r\n      _this.events.cell_mouseover({\"value\": value, \"header\": header}, evt);\r\n      var values = [];\r\n      if(_this.settings.row_ids.tooltip && parent.getAttr(\"class\") !== \"column_metadata\"){\r\n        values.push(_this.data.nodes[parent.getAttr(\"id\")].objects.join(\", \"));\r\n      }\r\n\r\n      if(header !== undefined){\r\n        values.push(header);\r\n      }\r\n      values.push(attrs.value);\r\n      var value = values.join(\"\\n\");\r\n\r\n      var tooltip = _this.objects_ref.tooltip_label.clone({x: x, y:y, id: \"col_label\",});\r\n      tooltip.add(_this.objects_ref.tooltip_tag.clone({pointerDirection: 'down'}), _this.objects_ref.tooltip_text.clone({text: value}));\r\n      \r\n      _this.heatmap_overlay.add(tooltip);\r\n      _this.heatmap_overlay.moveToTop();\r\n      _this.heatmap_overlay.draw();\r\n  }\r\n\r\n  InCHlib.prototype._unprefix = function(prefixed){\r\n    var _this = this;\r\n      return prefixed.split(_this.settings.target+\"#\")[1];\r\n  }\r\n\r\n  InCHlib.prototype._prefix = function(nonprefixed){\r\n    var _this = this;\r\n      return _this.settings.target + \"#\" + nonprefixed;\r\n  }\r\n\r\n  /**\r\n    * Returns array of features for object by its ID. When sent object ID is not present, false is returned\r\n    */\r\n  InCHlib.prototype.get_features_for_object = function(object_id){\r\n    var _this = this;\r\n      if(_this.objects2leaves[object_id] !== undefined){\r\n        var row_id = _this.objects2leaves[object_id];\r\n        return _this.data.nodes[row_id].features;\r\n      }\r\n      return false;\r\n  }\r\n\r\n  /**\r\n    * Adds a user defined color scale defined by its name start color, end color and optionaly middle color\r\n    */\r\n  InCHlib.prototype.add_color_scale = function(color_scale_name, color_scale){\r\n    var _this = this;\r\n      _this.colors[color_scale_name] = color_scale;\r\n      _this.target_element.find(\".color_scales\").remove();\r\n  }\r\n\r\n  InCHlib.prototype._get_visible_count = function(){\r\n    var _this = this;\r\n      return _this.on_features[\"data\"].length + _this.on_features[\"metadata\"].length + _this.on_features[\"count_column\"].length;\r\n  }\r\n\r\n  /**\r\n    * Update cluster heatmap settings\r\n    */\r\n  InCHlib.prototype.update_settings = function(settings_object){\r\n    var _this = this;\r\n    var navigation_toggle = _this.settings.navigation_toggle;\r\n    _this.settings = deepmerge(_this.settings, settings_object);\r\n\r\n    _this.dynamic_width = false;\r\n    if(_this.settings.width === \"dynamic\"){\r\n      _this.dynamic_width = true;\r\n      if(_this.target_element.width() === 0){\r\n        _this.target_element.css({\"width\": \"100%\"});\r\n      }\r\n      _this.settings.width = _this.target_element.width();\r\n    }\r\n  }\r\n\r\n  /**\r\n    * Redraw cluster heatmap\r\n    */\r\n  InCHlib.prototype.redraw = function(){\r\n    var _this = this;\r\n\r\n    if(_this.dynamic_width){\r\n      _this.settings.width = _this.target_element.width();\r\n    }\r\n    \r\n    _this._delete_all_layers();\r\n    _this.draw();\r\n  }\r\n\r\n  /**\r\n    * Redraw heatmap only\r\n    */\r\n  InCHlib.prototype.redraw_heatmap = function(){\r\n    var _this = this;\r\n    _this._delete_layers([_this.heatmap_layer, _this.heatmap_overlay, _this.highlighted_rows_layer, _this.header_layer]);\r\n    _this._set_color_settings();\r\n    _this._draw_heatmap();\r\n    _this._draw_heatmap_header();\r\n    _this.heatmap_layer.moveToBottom();\r\n    _this.heatmap_layer.moveUp();\r\n  }\r\n\r\n  /**\r\n    * Add metadata column\r\n    * @name [String] name of the column\r\n    * @data [Object] data object in format {leaf_id: value}\r\n    */\r\n  InCHlib.prototype.add_metadata_column = function(name, data){\r\n    var _this = this;\r\n    if(_this.metadata == undefined){\r\n      _this.metadata = {\r\n        \"feature_names\": [name],\r\n        \"nodes\": {}\r\n      }\r\n    }\r\n    else{\r\n      _this.metadata.feature_names.push(name);\r\n    }\r\n\r\n    for(var i = 0, len=_this.point_ids.length; i<len; i++){\r\n      var key = _this.point_ids[i];\r\n      if(_this.data.nodes[key].objects !== undefined){\r\n        var row_id = _this.data.nodes[key].objects[0];\r\n        var value = data[row_id];\r\n        if(value === undefined){\r\n          value = null;\r\n        }\r\n\r\n        if(_this.metadata.nodes[key] === undefined){\r\n          _this.metadata.nodes[key] = [value];\r\n        }\r\n        else{\r\n          _this.metadata.nodes[key].push(value); \r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  require(\"biojs-events\").mixin(InCHlib.prototype);\r\n  module.exports = InCHlib;\r\n\r\n"]}