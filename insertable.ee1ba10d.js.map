{"version":3,"sources":["components/insertable.js"],"names":["idSet","Set","initTable","table","innerHTML","addMir","id","idMap","document","getElementById","length","rows","connection_kind","forEach","element","has","add","newRow","insertRow","insertCell","innerText","element_getDetailes","addEventListener","event","td","tr","target","parentNode","removeChild","delete","targetConnection","Left_element_array","children","split","element_deatils","connection_list","show_connections","$","modal","connections_from_localStorage_name","connections_from_localStorage","localStorage","getItem","dict","JSON","parse","undefined","textContent"],"mappings":";AAkEC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EAAA,QAAA,OAAA,EAjED,IAAIA,EAAQ,IAAIC,IACT,SAASC,EAAUC,GACtBH,EAAO,IAAIC,IACXE,EAAMC,UAAU,GAGb,SAASC,EAAOC,EAAIC,GACpBA,GAAQ,aAARA,GAA6B,YAARA,EAChBJ,IAAAA,EAAQK,SAASC,eAAe,sBAChCC,EAASF,SAASC,eAAe,sBAAsBE,KAAKD,OAC5DE,EAAiB,oBAGjBT,EAAQK,SAASC,eAAe,sBAChCC,EAASF,SAASC,eAAe,sBAAsBE,KAAKD,OAC5DE,EAAiB,eAGrBN,EAAGO,QAAQ,SAAAC,GACJ,IAACd,EAAMe,IAAID,GAAS,CACvBd,EAAMgB,IAAIF,GACNG,IAAAA,EAASd,EAAMe,UAAUR,GAC7BO,EAAOE,WAAW,GAAGC,UAAUN,EAC3BO,IAAAA,EAAqBP,EAAQ,gBAAgBF,EACjDK,EAAOE,WAAW,GAAGf,UAAwBiB,cAAAA,OAAAA,EAA7C,wCACAJ,EAAOE,WAAW,GAAGf,UAAmBU,SAAAA,OAAAA,EAAxC,oDACAN,SAASC,eAAeK,GAASQ,iBAAiB,QAAS,SAAkBC,GACrEC,IACAC,EADKF,EAAMG,OAAOC,WACVA,WACZF,EAAGE,WAAWC,YAAYH,GAC1BzB,EAAM6B,OAAOf,KAEjBN,SAASC,eAAeY,GAAqBC,iBAAiB,QAASQ,GACvEpB,OAOZ,SAASoB,EAAiBP,GAClBC,IAEAO,EAFKR,EAAMG,OAAOC,WACAK,SAAS,GAAG1B,GACI2B,MAAM,KACxCC,EAAgBH,EAAmB,GACnCnB,EAAgBmB,EAAmB,GAEnCI,EAAkB3B,SAASC,eAAe,mBAG1C2B,EADiB,iBAAlBxB,EACkB,2BAEA,2BAF4BsB,EAAgBC,GAKjEE,EAAE,sBAAsBC,MAAM,QAGlC,SAASF,EAAiBG,EAAoCL,EAAiBC,GACvEK,IAAAA,EAAgCC,aAAaC,QAAQH,GACrDI,EAAMC,KAAKC,MAAML,GACOM,MAAxBH,EAAKT,IAAgE,GAAhCS,EAAKT,GAAiBxB,OAC3DyB,EAAgBY,YAAa,oCAE7BZ,EAAgBY,YAAYJ,EAAKT","file":"insertable.ee1ba10d.js","sourceRoot":"..","sourcesContent":["\r\nvar idSet = new Set()\r\nexport function initTable(table){\r\n    idSet= new Set();\r\n    table.innerHTML=\"\";\r\n}\r\n\r\nexport function addMir(id, idMap){\r\n    if(idMap==='inchlib1' ||idMap==='inchlib' ){// add mir only if the mir map was clicked\r\n        var table = document.getElementById(\"table-connect-1to2\")\r\n        var length = document.getElementById(\"table-connect-1to2\").rows.length;\r\n        var connection_kind= \"connect_1to2\";\r\n    }\r\n    else{\r\n        var table = document.getElementById(\"table-connect-2to1\")\r\n        var length = document.getElementById(\"table-connect-2to1\").rows.length;\r\n        var connection_kind= \"connect_2to1\";\r\n\r\n    }\r\n        id.forEach(element => {\r\n            if(!idSet.has(element)){\r\n            idSet.add(element)\r\n            var newRow = table.insertRow(length)\r\n            newRow.insertCell(0).innerText=element\r\n            var element_getDetailes= element+\"-getDetailes-\"+connection_kind;\r\n            newRow.insertCell(1).innerHTML=`<button id=${element_getDetailes}  type='button' >Click here</button>`;\r\n            newRow.insertCell(2).innerHTML=`<i id=${element} style=\"color:red;\"class=\"fas fa-trash-alt\"></i>`;\r\n            document.getElementById(element).addEventListener('click', function deleteId(event){\r\n                var td = event.target.parentNode; \r\n                var tr = td.parentNode; // the row to be removed\r\n                tr.parentNode.removeChild(tr);\r\n                idSet.delete(element);\r\n            });\r\n            document.getElementById(element_getDetailes).addEventListener('click', targetConnection);\r\n            length++;\r\n\r\n            }\r\n        });  \r\n}\r\n\r\n\r\nfunction targetConnection(event){\r\n    var td = event.target.parentNode; \r\n    var Left_element = td.children[0].id;\r\n    var Left_element_array = Left_element.split('-');\r\n    var element_deatils=Left_element_array[0];\r\n    let connection_kind=Left_element_array[2];\r\n\r\n    let connection_list = document.getElementById(\"connection_list\");\r\n\r\n    if(connection_kind===\"connect_1to2\")\r\n        show_connections('first_second_connections', element_deatils,connection_list)\r\n    else\r\n        show_connections('second_first_connections', element_deatils,connection_list)\r\n    \r\n\r\n    $('#connection-dialog').modal('show');\r\n}\r\n\r\nfunction show_connections(connections_from_localStorage_name, element_deatils, connection_list){\r\n    let connections_from_localStorage = localStorage.getItem(connections_from_localStorage_name);\r\n    let dict= JSON.parse(connections_from_localStorage);\r\n    if (dict[element_deatils]== undefined || dict[element_deatils].length == 0)\r\n        connection_list.textContent= 'There are no suitable connections'; \r\n    else\r\n        connection_list.textContent=dict[element_deatils]; \r\n}\r\n\r\n"]}